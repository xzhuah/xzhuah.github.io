{"version":3,"file":"static/js/114.90b5b931.chunk.js","mappings":"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","sources":["component/button/CopyButton.tsx","proto/application/aichat/AiChatMessage.ts","domain/aiChatroom/service/AiChatService.ts","component/text/MarkdownArea.tsx","domain/aiChatroom/component/ChatRecord.tsx","domain/aiChatroom/component/ThreadProfileItem.tsx","domain/aiChatroom/AiChatRoom.tsx"],"sourcesContent":["import {IconButton, IconButtonProps} from \"@mui/material\";\r\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\r\nimport copy from 'copy-to-clipboard';\r\nimport React from \"react\";\r\n// CopyButton 是一个便捷实用按钮组件，它可以复制文本到剪贴板。\r\ntype CopyButtonProps = {\r\n  text: string | (() => string);\r\n  icon?: React.ReactNode;\r\n} & IconButtonProps;\r\n\r\n// https://stackoverflow.com/questions/57868405/safari-clipboard-error-typeerror-undefined-is-not-an-object\r\nconst CopyButton = ({text, icon = <ContentCopyIcon/>, ...rest}: CopyButtonProps) => {\r\n  return <IconButton onClick={() => {\r\n    return copy(text instanceof Function ? text() : text);\r\n  }} {...rest}>{icon}</IconButton>\r\n}\r\n\r\nexport default React.memo(CopyButton);","// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v2.0.2\n//   protoc               v5.28.0\n// source: mydimension/application/aichat/AiChatMessage.proto\n\n/* eslint-disable */\nimport {BinaryReader, BinaryWriter} from \"@bufbuild/protobuf/wire\";\nimport {PageResult} from \"../../framework/QueryMessage\";\nimport {CustomerProfile} from \"../../framework/customer/CustomerInfo\";\n\nexport const protobufPackage = \"proto.application.aichat\";\n\nexport interface AiChatRecordMessage {\n  /** user, system, assistant (ChatMessageRole) */\n  role: string;\n  model: string;\n  message: string;\n  /** time in miliseconds */\n  createAt: number;\n}\n\nexport interface AiChatThreadMessage {\n  threadId: string;\n  title: string;\n  isPubic: boolean;\n  owner: CustomerProfile | undefined;\n  messages: AiChatRecordMessage[];\n  /** time in miliseconds */\n  lastModifiedAt: number;\n}\n\nexport interface AiChatThreadMessageList {\n  pageResult: PageResult | undefined;\n  threads: AiChatThreadMessage[];\n}\n\nexport interface TalkToAiRequest {\n  message: string;\n  model: string;\n  threadId: string;\n}\n\nfunction createBaseAiChatRecordMessage(): AiChatRecordMessage {\n  return { role: \"\", model: \"\", message: \"\", createAt: 0 };\n}\n\nexport const AiChatRecordMessage = {\n  encode(message: AiChatRecordMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.role !== \"\") {\n      writer.uint32(10).string(message.role);\n    }\n    if (message.model !== \"\") {\n      writer.uint32(18).string(message.model);\n    }\n    if (message.message !== \"\") {\n      writer.uint32(26).string(message.message);\n    }\n    if (message.createAt !== 0) {\n      writer.uint32(32).int64(message.createAt);\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): AiChatRecordMessage {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAiChatRecordMessage();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.role = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.model = reader.string();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.message = reader.string();\n          continue;\n        case 4:\n          if (tag !== 32) {\n            break;\n          }\n\n          message.createAt = longToNumber(reader.int64());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AiChatRecordMessage {\n    return {\n      role: isSet(object.role) ? globalThis.String(object.role) : \"\",\n      model: isSet(object.model) ? globalThis.String(object.model) : \"\",\n      message: isSet(object.message) ? globalThis.String(object.message) : \"\",\n      createAt: isSet(object.createAt) ? globalThis.Number(object.createAt) : 0,\n    };\n  },\n\n  toJSON(message: AiChatRecordMessage): unknown {\n    const obj: any = {};\n    if (message.role !== \"\") {\n      obj.role = message.role;\n    }\n    if (message.model !== \"\") {\n      obj.model = message.model;\n    }\n    if (message.message !== \"\") {\n      obj.message = message.message;\n    }\n    if (message.createAt !== 0) {\n      obj.createAt = Math.round(message.createAt);\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<AiChatRecordMessage>, I>>(base?: I): AiChatRecordMessage {\n    return AiChatRecordMessage.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<AiChatRecordMessage>, I>>(object: I): AiChatRecordMessage {\n    const message = createBaseAiChatRecordMessage();\n    message.role = object.role ?? \"\";\n    message.model = object.model ?? \"\";\n    message.message = object.message ?? \"\";\n    message.createAt = object.createAt ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseAiChatThreadMessage(): AiChatThreadMessage {\n  return { threadId: \"\", title: \"\", isPubic: false, owner: undefined, messages: [], lastModifiedAt: 0 };\n}\n\nexport const AiChatThreadMessage = {\n  encode(message: AiChatThreadMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.threadId !== \"\") {\n      writer.uint32(10).string(message.threadId);\n    }\n    if (message.title !== \"\") {\n      writer.uint32(18).string(message.title);\n    }\n    if (message.isPubic !== false) {\n      writer.uint32(24).bool(message.isPubic);\n    }\n    if (message.owner !== undefined) {\n      CustomerProfile.encode(message.owner, writer.uint32(34).fork()).join();\n    }\n    for (const v of message.messages) {\n      AiChatRecordMessage.encode(v!, writer.uint32(42).fork()).join();\n    }\n    if (message.lastModifiedAt !== 0) {\n      writer.uint32(48).int64(message.lastModifiedAt);\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): AiChatThreadMessage {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAiChatThreadMessage();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.threadId = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.title = reader.string();\n          continue;\n        case 3:\n          if (tag !== 24) {\n            break;\n          }\n\n          message.isPubic = reader.bool();\n          continue;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.owner = CustomerProfile.decode(reader, reader.uint32());\n          continue;\n        case 5:\n          if (tag !== 42) {\n            break;\n          }\n\n          message.messages.push(AiChatRecordMessage.decode(reader, reader.uint32()));\n          continue;\n        case 6:\n          if (tag !== 48) {\n            break;\n          }\n\n          message.lastModifiedAt = longToNumber(reader.int64());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AiChatThreadMessage {\n    return {\n      threadId: isSet(object.threadId) ? globalThis.String(object.threadId) : \"\",\n      title: isSet(object.title) ? globalThis.String(object.title) : \"\",\n      isPubic: isSet(object.isPubic) ? globalThis.Boolean(object.isPubic) : false,\n      owner: isSet(object.owner) ? CustomerProfile.fromJSON(object.owner) : undefined,\n      messages: globalThis.Array.isArray(object?.messages)\n        ? object.messages.map((e: any) => AiChatRecordMessage.fromJSON(e))\n        : [],\n      lastModifiedAt: isSet(object.lastModifiedAt) ? globalThis.Number(object.lastModifiedAt) : 0,\n    };\n  },\n\n  toJSON(message: AiChatThreadMessage): unknown {\n    const obj: any = {};\n    if (message.threadId !== \"\") {\n      obj.threadId = message.threadId;\n    }\n    if (message.title !== \"\") {\n      obj.title = message.title;\n    }\n    if (message.isPubic !== false) {\n      obj.isPubic = message.isPubic;\n    }\n    if (message.owner !== undefined) {\n      obj.owner = CustomerProfile.toJSON(message.owner);\n    }\n    if (message.messages?.length) {\n      obj.messages = message.messages.map((e) => AiChatRecordMessage.toJSON(e));\n    }\n    if (message.lastModifiedAt !== 0) {\n      obj.lastModifiedAt = Math.round(message.lastModifiedAt);\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<AiChatThreadMessage>, I>>(base?: I): AiChatThreadMessage {\n    return AiChatThreadMessage.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<AiChatThreadMessage>, I>>(object: I): AiChatThreadMessage {\n    const message = createBaseAiChatThreadMessage();\n    message.threadId = object.threadId ?? \"\";\n    message.title = object.title ?? \"\";\n    message.isPubic = object.isPubic ?? false;\n    message.owner = (object.owner !== undefined && object.owner !== null)\n      ? CustomerProfile.fromPartial(object.owner)\n      : undefined;\n    message.messages = object.messages?.map((e) => AiChatRecordMessage.fromPartial(e)) || [];\n    message.lastModifiedAt = object.lastModifiedAt ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseAiChatThreadMessageList(): AiChatThreadMessageList {\n  return { pageResult: undefined, threads: [] };\n}\n\nexport const AiChatThreadMessageList = {\n  encode(message: AiChatThreadMessageList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.pageResult !== undefined) {\n      PageResult.encode(message.pageResult, writer.uint32(10).fork()).join();\n    }\n    for (const v of message.threads) {\n      AiChatThreadMessage.encode(v!, writer.uint32(18).fork()).join();\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): AiChatThreadMessageList {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAiChatThreadMessageList();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.pageResult = PageResult.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.threads.push(AiChatThreadMessage.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AiChatThreadMessageList {\n    return {\n      pageResult: isSet(object.pageResult) ? PageResult.fromJSON(object.pageResult) : undefined,\n      threads: globalThis.Array.isArray(object?.threads)\n        ? object.threads.map((e: any) => AiChatThreadMessage.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: AiChatThreadMessageList): unknown {\n    const obj: any = {};\n    if (message.pageResult !== undefined) {\n      obj.pageResult = PageResult.toJSON(message.pageResult);\n    }\n    if (message.threads?.length) {\n      obj.threads = message.threads.map((e) => AiChatThreadMessage.toJSON(e));\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<AiChatThreadMessageList>, I>>(base?: I): AiChatThreadMessageList {\n    return AiChatThreadMessageList.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<AiChatThreadMessageList>, I>>(object: I): AiChatThreadMessageList {\n    const message = createBaseAiChatThreadMessageList();\n    message.pageResult = (object.pageResult !== undefined && object.pageResult !== null)\n      ? PageResult.fromPartial(object.pageResult)\n      : undefined;\n    message.threads = object.threads?.map((e) => AiChatThreadMessage.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseTalkToAiRequest(): TalkToAiRequest {\n  return { message: \"\", model: \"\", threadId: \"\" };\n}\n\nexport const TalkToAiRequest = {\n  encode(message: TalkToAiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.message !== \"\") {\n      writer.uint32(10).string(message.message);\n    }\n    if (message.model !== \"\") {\n      writer.uint32(18).string(message.model);\n    }\n    if (message.threadId !== \"\") {\n      writer.uint32(26).string(message.threadId);\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): TalkToAiRequest {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTalkToAiRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.message = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.model = reader.string();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.threadId = reader.string();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TalkToAiRequest {\n    return {\n      message: isSet(object.message) ? globalThis.String(object.message) : \"\",\n      model: isSet(object.model) ? globalThis.String(object.model) : \"\",\n      threadId: isSet(object.threadId) ? globalThis.String(object.threadId) : \"\",\n    };\n  },\n\n  toJSON(message: TalkToAiRequest): unknown {\n    const obj: any = {};\n    if (message.message !== \"\") {\n      obj.message = message.message;\n    }\n    if (message.model !== \"\") {\n      obj.model = message.model;\n    }\n    if (message.threadId !== \"\") {\n      obj.threadId = message.threadId;\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<TalkToAiRequest>, I>>(base?: I): TalkToAiRequest {\n    return TalkToAiRequest.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<TalkToAiRequest>, I>>(object: I): TalkToAiRequest {\n    const message = createBaseTalkToAiRequest();\n    message.message = object.message ?? \"\";\n    message.model = object.model ?? \"\";\n    message.threadId = object.threadId ?? \"\";\n    return message;\n  },\n};\n\ntype Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;\n\nexport type DeepPartial<T> = T extends Builtin ? T\n  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>\n  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };\n\nfunction longToNumber(int64: { toString(): string }): number {\n  const num = globalThis.Number(int64.toString());\n  if (num > globalThis.Number.MAX_SAFE_INTEGER) {\n    throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n  }\n  if (num < globalThis.Number.MIN_SAFE_INTEGER) {\n    throw new globalThis.Error(\"Value is smaller than Number.MIN_SAFE_INTEGER\");\n  }\n  return num;\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import {pb_pbPost, str_pbPost, str_strPost} from \"../../../api/util/MyDimensionClient\";\r\nimport {PageQuery} from \"../../../proto/framework/QueryMessage\";\r\nimport {\r\n  AiChatRecordMessage,\r\n  AiChatThreadMessage,\r\n  AiChatThreadMessageList,\r\n  TalkToAiRequest\r\n} from \"../../../proto/application/aichat/AiChatMessage\";\r\n\r\nconst aiChatAPIPrefix = '/api/v0/ai/chat';\r\n\r\nexport const getThreadProfile = (page: number, pageSize: number) => {\r\n  const pageQuery = PageQuery.fromJSON({page: page, pageSize: pageSize});\r\n\r\n  return pb_pbPost(aiChatAPIPrefix + \"/getThreadProfile\", PageQuery, AiChatThreadMessageList, pageQuery);\r\n}\r\n\r\nexport const getChatThread = (threadId: string) => {\r\n  return str_pbPost(aiChatAPIPrefix + \"/getChatThread\", AiChatThreadMessage, threadId);\r\n}\r\n\r\nexport const newChatThread = () => {\r\n  return str_strPost(aiChatAPIPrefix + \"/newChatThread\");\r\n}\r\n\r\nexport const setVisibility = (isPublic: boolean, threadId: string) => {\r\n  if (isPublic) {\r\n    return str_strPost(aiChatAPIPrefix + \"/make_public\", threadId);\r\n  } else {\r\n    return str_strPost(aiChatAPIPrefix + \"/make_private\", threadId);\r\n  }\r\n}\r\n\r\nexport const talkToAssistant = (message: string, threadId: string, model: string) => {\r\n  const talkRequest = TalkToAiRequest.fromJSON({\r\n    message: message,\r\n    threadId: threadId,\r\n    model: model\r\n  });\r\n\r\n  return pb_pbPost(aiChatAPIPrefix + \"/talk_sync\", TalkToAiRequest, AiChatRecordMessage, talkRequest);\r\n}","import {Box, BoxProps} from \"@mui/material\";\r\n\r\nimport ReactMarkdown from 'react-markdown'\r\nimport RemarkMath from \"remark-math\";\r\nimport RemarkBreaks from \"remark-breaks\";\r\nimport RehypeKatex from \"rehype-katex\";\r\nimport RemarkGfm from \"remark-gfm\";\r\nimport RehypeHighlight from \"rehype-highlight\";\r\n\r\nconst LinkRenderer = (props: any) => {\r\n  return <a target=\"_blank\" href={props.href}>\r\n    {props.children}\r\n  </a>;\r\n}\r\n\r\nconst MarkdownArea = ({children, sx, ...rest}: BoxProps) => {\r\n  return <Box sx={{...sx}} {...rest}>\r\n    <ReactMarkdown\r\n\r\n        components={{\r\n          a: LinkRenderer,\r\n        }}\r\n        remarkPlugins={[RemarkMath, RemarkGfm, RemarkBreaks]}\r\n        rehypePlugins={[\r\n          RehypeKatex,\r\n          [\r\n            RehypeHighlight,\r\n            {\r\n              detect: false,\r\n              ignoreMissing: true,\r\n            },\r\n          ],\r\n        ]}\r\n    >\r\n      {children as string}\r\n    </ReactMarkdown>\r\n\r\n  </Box>\r\n}\r\n\r\nexport default MarkdownArea;","import {Avatar, Box, Stack, StackProps} from \"@mui/material\";\r\nimport HiveIcon from \"@mui/icons-material/Hive\";\r\nimport React from \"react\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\r\nimport MarkdownArea from \"../../../component/text/MarkdownArea\";\r\nimport CopyButton from \"../../../component/button/CopyButton\";\r\nimport {AiChatRecordMessage} from \"../../../proto/application/aichat/AiChatMessage\";\r\nimport {Typography} from \"../../../component/wrapper/MuiWrappers\";\r\n\r\ntype ChatRecordProps = {\r\n  record: AiChatRecordMessage\r\n} & StackProps\r\nconst ChatRecord = ({record, sx, ...rest}: ChatRecordProps) => {\r\n  return <><Stack direction={\"row\"}\r\n                  paddingY={2}\r\n                  maxWidth={\"100%\"}\r\n                  sx={{...sx}}\r\n                  {...rest}>\r\n    <Box marginTop={1}>\r\n      {record.role === \"assistant\" ? <Avatar sx={{bgcolor: \"primary.main\"}}\r\n                                             style={{backgroundColor: \"#e4a710\"}}><HiveIcon/></Avatar> :\r\n          <Avatar sx={{bgcolor: \"primary.main\"}}><AccountCircleIcon/></Avatar>}\r\n    </Box>\r\n    <Stack direction={\"column\"} marginX={4} textAlign={\"start\"}>\r\n      <Typography variant={\"caption\"}>\r\n        {new Date(record.createAt).toLocaleString()} {record.role === \"assistant\" ? `(${record.model})` : \"\"}\r\n      </Typography>\r\n      <Stack direction={\"row\"} flexGrow={1} textAlign={\"start\"}>\r\n        <MarkdownArea>\r\n          {record.message}\r\n        </MarkdownArea>\r\n        <CopyButton sx={{alignSelf: \"flex-start\", marginTop: 1}} text={rest.children as string}/>\r\n      </Stack>\r\n\r\n    </Stack>\r\n\r\n  </Stack>\r\n    <Divider sx={{width: \"100%\"}}/>\r\n  </>;\r\n}\r\n\r\n\r\nexport default React.memo(ChatRecord);","// @flow\r\nimport * as React from 'react';\r\nimport {AiChatThreadMessage} from \"../../../proto/application/aichat/AiChatMessage\";\r\nimport {MenuItemProps} from \"@mui/material/MenuItem\";\r\nimport {ListItemText, MenuItem} from \"../../../component/wrapper/MuiWrappers\";\r\n\r\ntype ThreadProfileItemProps = {\r\n  profile: AiChatThreadMessage\r\n} & MenuItemProps;\r\nexport const ThreadProfileItem = ({profile, ...rest}: ThreadProfileItemProps) => {\r\n  return (\r\n      <MenuItem\r\n          key={profile.threadId}\r\n          sx={{\r\n            width: \"100%\",\r\n            textAlign: \"start\",\r\n            textOverflow: \"ellipsis\",\r\n            whiteSpace: \"nowrap\",\r\n            overflow: \"hidden\",\r\n            minHeight: \"2rem\"\r\n          }} {...rest}> <ListItemText\r\n          enableTranslate={false}>{profile.title}</ListItemText></MenuItem>\r\n  );\r\n};","// @flow\r\nimport * as React from 'react';\r\nimport {useCallback, useEffect, useRef} from 'react';\r\nimport {\r\n  Autocomplete,\r\n  CircularProgress,\r\n  Divider,\r\n  Drawer,\r\n  IconButton,\r\n  MenuList,\r\n  Stack,\r\n  Switch\r\n} from \"@mui/material\";\r\nimport {Button, FormControlLabel, TextField, Typography} from \"../../component/wrapper/MuiWrappers\";\r\nimport {\r\n  getChatThread,\r\n  getThreadProfile,\r\n  newChatThread,\r\n  setVisibility,\r\n  talkToAssistant\r\n} from \"./service/AiChatService\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nimport {AutocompleteRenderInputParams} from \"@mui/material/Autocomplete/Autocomplete\";\r\nimport {print} from \"../../api/util/Logging\";\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport HistoryIcon from '@mui/icons-material/History';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {\r\n  AiChatRecordMessage,\r\n  AiChatThreadMessage\r\n} from \"../../proto/application/aichat/AiChatMessage\";\r\nimport ChatRecord from \"./component/ChatRecord\";\r\nimport {useSearchParams} from \"react-router-dom\";\r\nimport BreakpointContainer from \"../../component/container/BreakpointContainer\";\r\nimport AlertContext from \"../../context/AlertContext\";\r\nimport {ThreadProfileItem} from \"./component/ThreadProfileItem\";\r\nimport ListComponent from \"../../component/container/ListComponent\";\r\nimport FunctionalTextArea from \"../../component/input/FunctionalTextArea\";\r\n\r\n// https://platform.openai.com/docs/models/gpt-4\r\nconst allModels = [\r\n  \"gpt-4o\",\r\n  \"gpt-4o-mini\",\r\n  \"gpt-4-turbo\",\r\n  \"gpt-4\",\r\n  \"gpt-3.5-turbo\",\r\n  \"gpt-3.5-turbo-16k\"];\r\n\r\nexport const AiChatRoom = () => {\r\n  const {t} = useTranslation();\r\n  const [newMessage, setNewMessage] = React.useState<string>(\"\");\r\n  const {showAlert} = React.useContext(AlertContext)\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const threadId = searchParams.get(\"id\");\r\n\r\n  const [messages, setMessages] = React.useState<AiChatRecordMessage[]>([]);\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n  const [currentModel, setCurrentModel] = React.useState<string>(allModels[0]);\r\n  const [threadProfiles, setThreadProfiles] = React.useState<AiChatThreadMessage[]>([]);\r\n  const [maxPage, setMaxPage] = React.useState<number>(0);\r\n  const [currentThreadProfilePage, setCurrentThreadProfilePage] = React.useState<number>(0);\r\n  const [leftDrawerState, setLeftDrawerState] = React.useState(false);\r\n  const [isPublic, setIsPublic] = React.useState<boolean>(false);\r\n  const pageSize = 10;\r\n\r\n\r\n  const bottomRef = useRef<null | HTMLDivElement>(null);\r\n  const inputRef = useRef<null | HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      inputRef.current?.focus();\r\n    }\r\n  }, [loading]);\r\n\r\n  useEffect(() => {\r\n    getThreadProfile(currentThreadProfilePage, pageSize).then((response) => {\r\n      setThreadProfiles(response.threads);\r\n      if (response.pageResult) {\r\n        setMaxPage(response.pageResult.totalPage - 1);\r\n      }\r\n    }).catch((error) => {\r\n      showAlert(error.message, \"error\");\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (threadId) {\r\n      getChatThread(threadId).then((response) => {\r\n        if (response) {\r\n          setMessages(response.messages);\r\n          setIsPublic(response.isPubic);\r\n        }\r\n      }).catch((error) => {\r\n        showAlert(\"Chat not found\", \"error\");\r\n        setSearchParams({});\r\n        print(error);\r\n      });\r\n    } else {\r\n      setMessages([]);\r\n    }\r\n  }, [searchParams]);\r\n\r\n  useEffect(() => {\r\n    // 👇️ scroll to bottom every time messages change\r\n    bottomRef.current?.scrollIntoView({behavior: 'smooth', block: 'end'});\r\n\r\n  }, [messages]);\r\n\r\n  const loadMoreThreadProfile = () => {\r\n    if (currentThreadProfilePage < maxPage) {\r\n      getThreadProfile(currentThreadProfilePage + 1, pageSize).then((response) => {\r\n        setThreadProfiles([...threadProfiles, ...response.threads]);\r\n        setCurrentThreadProfilePage(currentThreadProfilePage + 1);\r\n        if (response.pageResult) {\r\n          setMaxPage(response.pageResult.totalPage - 1);\r\n        }\r\n      }).catch((error) => {\r\n        showAlert(error.message, \"error\");\r\n      });\r\n    }\r\n  }\r\n\r\n  const sendMessage = () => {\r\n    if (newMessage === \"\") {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    const newMessageRecord = AiChatRecordMessage.create();\r\n    newMessageRecord.message = newMessage;\r\n    newMessageRecord.role = \"user\";\r\n    newMessageRecord.createAt = Date.now();\r\n\r\n    setMessages((oldMessages) => [...oldMessages, newMessageRecord]);\r\n    if (!threadId) {\r\n      newChatThread().then((response) => {\r\n        const newThreadId = response;\r\n        talkToAssistant(newMessage, response, currentModel).then((response) => {\r\n          setMessages((oldMessages) => [...oldMessages, response]);\r\n          setSearchParams({id: newThreadId});\r\n          setLoading(false);\r\n          setNewMessage(\"\");\r\n        });\r\n      });\r\n    } else {\r\n      talkToAssistant(newMessage, threadId, currentModel).then((response) => {\r\n        setMessages((oldMessages) => [...oldMessages, response]);\r\n        setLoading(false);\r\n        setNewMessage(\"\");\r\n      });\r\n    }\r\n  }\r\n\r\n  const checkKeyPress = useCallback(async (e: KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      if (e.ctrlKey || e.shiftKey) {\r\n        e.preventDefault();\r\n        sendMessage();\r\n      }\r\n    }\r\n  }, [newMessage]);\r\n\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", checkKeyPress);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", checkKeyPress);\r\n    };\r\n  }, [checkKeyPress]);\r\n\r\n  return <Stack direction={\"row\"} justifyContent={\"start\"} alignItems={\"start\"} spacing={0}\r\n                width={\"100%\"}\r\n                height={\"89dvh\"}>\r\n    <BreakpointContainer up={\"md\"}>\r\n      <Stack direction={\"column\"}\r\n             alignItems={\"flex-start\"}\r\n             height={\"100%\"}\r\n             width={\"20%\"}\r\n             minWidth={\"250px\"}\r\n             spacing={0}\r\n             sx={{\r\n               paddingX: \"5px\",\r\n               overflowY: \"auto\",\r\n               textOverflow: \"ellipsis\",\r\n               backgroundColor: \"#f1f1f1\",\r\n               borderRadius: \"5px\"\r\n             }}>\r\n        <Stack direction={\"row\"} justifyContent={\"center\"} width={\"100%\"} paddingTop={2}>\r\n          <Typography variant={\"h6\"}>{\"Chat History\"}</Typography>\r\n        </Stack>\r\n\r\n        <MenuList dense sx={{width: \"100%\"}}>\r\n          <ListComponent data={threadProfiles} renderItem={(profile) => {\r\n            return <Stack key={profile.threadId} direction={\"column\"}>\r\n              <ThreadProfileItem key={profile.threadId} profile={profile}\r\n                                 onClick={() => {\r\n                                   setSearchParams({id: profile.threadId});\r\n                                 }}/>\r\n              <Divider/>\r\n            </Stack>\r\n          }}/>\r\n        </MenuList>\r\n\r\n        {(currentThreadProfilePage < maxPage) &&\r\n            <Button onClick={loadMoreThreadProfile}>{\"Load More\"}</Button>}\r\n      </Stack>\r\n    </BreakpointContainer>\r\n\r\n    <BreakpointContainer down={\"md\"}>\r\n      <Drawer\r\n          anchor={\"left\"}\r\n          open={leftDrawerState}\r\n          onClose={() => setLeftDrawerState(false)}\r\n          className={\"blurDialog\"}\r\n      >\r\n        <Stack direction={\"column\"}\r\n               alignItems={\"flex-start\"}\r\n               width={\"70dvw\"}\r\n               spacing={0}\r\n               sx={{padding: \"20px\", overflowY: \"auto\", textOverflow: \"ellipsis\"}}>\r\n          <Stack direction={\"row\"} justifyContent={\"center\"} width={\"100%\"}>\r\n            <Typography variant={\"h6\"} flexGrow={1}>{\"Chat History\"}</Typography>\r\n            <IconButton\r\n                sx={{marginRight: \"8px\"}}\r\n                onClick={() => {\r\n                  setLeftDrawerState(false);\r\n                }}>\r\n              <ArrowBackIcon/>\r\n            </IconButton>\r\n          </Stack>\r\n          <ListComponent data={[...threadProfiles]} renderItem={(profile) => {\r\n            return <Stack key={profile.threadId} direction={\"column\"}\r\n                          width={\"100%\"}><ThreadProfileItem profile={profile}\r\n                                                            onClick={() => {\r\n                                                              setSearchParams({id: profile.threadId});\r\n                                                              setLeftDrawerState(false);\r\n                                                            }}/>\r\n              <Divider/>\r\n            </Stack>\r\n          }}/>\r\n          {(currentThreadProfilePage < maxPage) &&\r\n              <Button onClick={loadMoreThreadProfile}>{\"Load More\"}</Button>}\r\n        </Stack>\r\n      </Drawer>\r\n    </BreakpointContainer>\r\n\r\n\r\n    <Stack direction={\"column\"} alignItems={\"flex-start\"} sx={{\r\n      width: {\r\n        xs: \"100%\",\r\n        md: \"85%\"\r\n      },\r\n      height: \"100%\",\r\n    }}>\r\n      <Stack direction={\"row\"} justifyContent={\"start\"} alignItems={\"center\"} width={\"100%\"}\r\n             spacing={2}>\r\n        <BreakpointContainer down={\"md\"}>\r\n          <IconButton aria-label={\"menu\"} onClick={() => {\r\n            setLeftDrawerState(true);\r\n          }\r\n          }\r\n                      sx={{justifySelf: \"flex-start\"}}>\r\n            <HistoryIcon/>\r\n          </IconButton>\r\n        </BreakpointContainer>\r\n        <Autocomplete options={allModels}\r\n                      sx={{\r\n                        flexGrow: 1\r\n                      }}\r\n                      value={currentModel}\r\n                      onChange={(event, newValue) =>\r\n                          setCurrentModel(newValue as string)\r\n                      }\r\n                      renderInput={(params: AutocompleteRenderInputParams) =>\r\n                          <TextField {...params}\r\n                                     label={t(\"Model\")}/>}/>\r\n        {(threadId !== null && threadId.length > 0) &&\r\n            <FormControlLabel control={<Switch checked={isPublic}\r\n                                               onChange={(event) => {\r\n                                                 const toCheck = event.target.checked;\r\n                                                 setVisibility(toCheck, threadId).then((response) => {\r\n                                                   setIsPublic(toCheck);\r\n                                                   if (toCheck) {\r\n                                                     showAlert(\"You can send the link of this chat to other people to let them join this chat!\", \"success\");\r\n                                                   }\r\n                                                 }).catch((error) => {\r\n                                                   showAlert(error.message, \"error\");\r\n                                                 });\r\n                                               }}\r\n\r\n            />} label=\"Sharing\"/>}\r\n        <IconButton onClick={() => {\r\n          setSearchParams({});\r\n          setMessages([]);\r\n          setCurrentThreadProfilePage(0);\r\n\r\n          getThreadProfile(0, pageSize).then((response) => {\r\n            setThreadProfiles(response.threads);\r\n            if (response.pageResult) {\r\n              setMaxPage(response.pageResult.totalPage - 1);\r\n            }\r\n          }).catch((error) => {\r\n            showAlert(error.message, \"error\");\r\n          });\r\n          inputRef.current?.focus();\r\n        }\r\n        }><AddIcon/></IconButton>\r\n      </Stack>\r\n\r\n      <Stack direction={\"column\"} alignItems={\"flex-start\"} flexGrow={1}\r\n             sx={{\r\n               width: \"100%\"\r\n             }}\r\n             overflow={\"auto\"} textOverflow={\"ellipsis\"} className={\"hideScrollBar\"}>\r\n\r\n        <ListComponent data={messages} renderItem={(record, index) => {\r\n          return <ChatRecord key={index} record={record}\r\n                             paddingX={2}/>;\r\n        }}/>\r\n        <div ref={bottomRef}/>\r\n\r\n      </Stack>\r\n\r\n      <Stack direction={\"row\"}\r\n             width={\"100%\"}\r\n             justifyContent={\"center\"} alignItems={\"flex-end\"} spacing={2}>\r\n        <FunctionalTextArea minRows={3}\r\n                            value={newMessage}\r\n                            inputSlotProps={{sx: {borderRadius: \"0px\"}}}\r\n                            style={{borderRadius: \"0px\"}}\r\n                            onChange={(event) => {\r\n                              setNewMessage(event.target.value);\r\n                            }}\r\n                            placeholder={t(\"Ctrl + Enter to Send a message\")}\r\n        >\r\n          <IconButton\r\n              disabled={newMessage.length === 0 || loading}\r\n              onClick={sendMessage}>\r\n            {loading ? <CircularProgress size={24}/> : <SendIcon/>}\r\n          </IconButton>\r\n        </FunctionalTextArea>\r\n      </Stack>\r\n    </Stack>\r\n\r\n  </Stack>;\r\n};\r\n\r\nexport default React.memo(AiChatRoom);"],"names":["CopyButton","_ref","text","icon","_jsx","ContentCopyIcon","rest","IconButton","onClick","copy","Function","children","React","AiChatRecordMessage","encode","message","writer","arguments","length","undefined","BinaryWriter","role","uint32","string","model","createAt","int64","decode","input","reader","BinaryReader","end","len","pos","tag","longToNumber","skip","fromJSON","object","isSet","globalThis","String","Number","toJSON","obj","Math","round","create","base","fromPartial","_object$role","_object$model","_object$message","_object$createAt","AiChatThreadMessage","threadId","title","isPubic","bool","owner","CustomerProfile","fork","join","v","messages","lastModifiedAt","push","Boolean","Array","isArray","map","e","_message$messages","_object$threadId","_object$title","_object$isPubic","_object$messages","_object$lastModifiedA","AiChatThreadMessageList","pageResult","PageResult","threads","_message$threads","_object$threads","TalkToAiRequest","_object$message2","_object$model2","_object$threadId2","num","toString","MAX_SAFE_INTEGER","Error","MIN_SAFE_INTEGER","value","aiChatAPIPrefix","getThreadProfile","page","pageSize","pageQuery","PageQuery","pb_pbPost","talkToAssistant","talkRequest","LinkRenderer","props","target","href","sx","Box","ReactMarkdown","components","a","remarkPlugins","RemarkMath","RemarkGfm","RemarkBreaks","rehypePlugins","RehypeKatex","RehypeHighlight","detect","ignoreMissing","ChatRecord","record","_jsxs","_Fragment","Stack","direction","paddingY","maxWidth","marginTop","Avatar","bgcolor","style","backgroundColor","HiveIcon","AccountCircleIcon","marginX","textAlign","Typography","variant","Date","toLocaleString","flexGrow","MarkdownArea","alignSelf","Divider","width","ThreadProfileItem","profile","MenuItem","textOverflow","whiteSpace","overflow","minHeight","ListItemText","enableTranslate","allModels","AiChatRoom","t","useTranslation","newMessage","setNewMessage","showAlert","AlertContext","searchParams","setSearchParams","useSearchParams","get","setMessages","loading","setLoading","currentModel","setCurrentModel","threadProfiles","setThreadProfiles","maxPage","setMaxPage","currentThreadProfilePage","setCurrentThreadProfilePage","leftDrawerState","setLeftDrawerState","isPublic","setIsPublic","bottomRef","useRef","inputRef","useEffect","_inputRef$current","current","focus","then","response","totalPage","catch","error","str_pbPost","getChatThread","print","_bottomRef$current","scrollIntoView","behavior","block","loadMoreThreadProfile","sendMessage","newMessageRecord","now","oldMessages","str_strPost","newThreadId","id","checkKeyPress","useCallback","async","key","ctrlKey","shiftKey","preventDefault","window","addEventListener","removeEventListener","justifyContent","alignItems","spacing","height","BreakpointContainer","up","minWidth","paddingX","overflowY","borderRadius","paddingTop","MenuList","dense","ListComponent","data","renderItem","Button","down","Drawer","anchor","open","onClose","className","padding","marginRight","ArrowBackIcon","xs","md","justifySelf","HistoryIcon","Autocomplete","options","onChange","event","newValue","renderInput","params","TextField","label","FormControlLabel","control","Switch","checked","toCheck","setVisibility","_inputRef$current2","AddIcon","index","ref","FunctionalTextArea","minRows","inputSlotProps","placeholder","disabled","CircularProgress","size","SendIcon"],"sourceRoot":""}