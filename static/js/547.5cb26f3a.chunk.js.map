{"version":3,"file":"static/js/547.5cb26f3a.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/MarkUnreadChatAlt.js","../node_modules/@mui/icons-material/esm/MarkChatRead.js","domain/notification/components/NotificationItem.tsx","domain/notification/NotificationWidget.tsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"circle\", {\n  cx: \"19\",\n  cy: \"3\",\n  r: \"3\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 8V6h9.03c-1.21-1.6-1.08-3.21-.92-4H4.01c-1.1 0-2 .89-2 2L2 22l4-4h14c1.1 0 2-.9 2-2V6.97C21.16 7.61 20.13 8 19 8zm8 6H6v-2h8zm4-3H6V9h12z\"\n}, \"1\")], 'MarkUnreadChatAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m17.34 20-3.54-3.54 1.41-1.41 2.12 2.12 4.24-4.24L23 14.34zM12 17c0-3.87 3.13-7 7-7 1.08 0 2.09.25 3 .68V4c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v18l4-4h6c0-.17.01-.33.03-.5-.02-.16-.03-.33-.03-.5\"\n}), 'MarkChatRead');","import * as React from 'react';\r\nimport {useCallback} from 'react';\r\nimport {NotificationProfile} from \"../../../proto/framework/notification/NotificationMessage\";\r\nimport {Stack, StackProps} from \"@mui/material\";\r\nimport ProfileAvatar from \"../../customer/component/ProfileAvatar\";\r\nimport {get_customer_url} from \"../../../navigation/routerUtil\";\r\nimport {Typography} from \"../../../component/wrapper/MuiWrappers\";\r\nimport {timeForRender} from \"../../../api/util/TimeUtil\";\r\nimport ImageContainer from \"../../../component/container/ImageContainer\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {useSmartNavigate} from \"../../../hook/CommonUiHook\";\r\nimport MarkUnreadChatAltIcon from '@mui/icons-material/MarkUnreadChatAlt';\r\nimport MarkChatReadIcon from '@mui/icons-material/MarkChatRead';\r\n\r\ntype NotificationItemProps = {\r\n  notification: NotificationProfile;\r\n  onRead: () => Promise<void>;\r\n} & StackProps;\r\nconst NotificationItem = ({notification, onRead, ...rest}: NotificationItemProps) => {\r\n  const navigate = useSmartNavigate();\r\n  const [read, setRead] = React.useState<boolean>(notification.read);\r\n  const {t} = useTranslation();\r\n\r\n  const ack = useCallback(() => {\r\n    if (!read) {\r\n      onRead().then(() => {\r\n        setRead(true);\r\n      });\r\n    } else {\r\n      setRead(true);\r\n    }\r\n  }, [notification.id, onRead, read]);\r\n\r\n  const onNotificationClick = useCallback(() => {\r\n    if (!read) {\r\n      ack();\r\n    }\r\n    if (notification.link) {\r\n      navigate(notification.link);\r\n    }\r\n  }, [ack, navigate, notification.link, read]);\r\n\r\n  return <Stack justifyContent={\"flex-start\"} direction={\"row\"} spacing={2} {...rest}>\r\n    {notification.sender &&\r\n        <ProfileAvatar title={notification.sender.name} avatarUrl={notification.sender.avatarUrl}\r\n                       sx={{width: 60, height: 60}}\r\n                       profileLink={get_customer_url(notification.sender.id)}/>}\r\n    <Stack direction={\"column\"} flexGrow={1} alignItems={\"start\"}\r\n           className={\"pointer\"}\r\n           onMouseEnter={() => {\r\n             ack();\r\n           }}\r\n           onClick={() => {\r\n             onNotificationClick();\r\n           }}>\r\n      <Stack direction={\"row\"} alignItems={\"center\"} spacing={2}>\r\n        {notification.title.length > 0 &&\r\n            <Typography variant={\"h6\"}>{notification.title}</Typography>}\r\n        {notification.count > 1 &&\r\n            <Typography variant={\"body1\"}>{\" + \" + notification.count}</Typography>}\r\n        {read ? <MarkChatReadIcon color={\"success\"}/> :\r\n            <MarkUnreadChatAltIcon color={\"warning\"}/>}\r\n      </Stack>\r\n      {notification.content.length > 0 &&\r\n          <Typography variant={\"body1\"} enableTranslate={false}>{notification.content}</Typography>}\r\n      <Typography\r\n          variant={\"caption\"}>{timeForRender(notification.createAt)}, {read ? t(\"has read\") : t(\"un read\")}</Typography>\r\n    </Stack>\r\n    {notification.avatarUrl &&\r\n        <ImageContainer className={\"pointer\"} src={notification.avatarUrl}\r\n                        onMouseEnter={() => {\r\n                          ack();\r\n                        }\r\n                        }\r\n                        onClick={() => {\r\n                          onNotificationClick();\r\n                        }}\r\n                        sx={{maxWidth: 80, maxHeight: 80}}\r\n        />}\r\n  </Stack>\r\n};\r\n\r\nexport default NotificationItem;","import * as React from 'react';\r\nimport {useEffect} from 'react';\r\nimport {Divider, Stack, StackProps, Switch} from \"@mui/material\";\r\nimport ListComponent from \"../../component/container/ListComponent\";\r\nimport NotificationItem from \"./components/NotificationItem\";\r\nimport {NotificationProfile} from \"../../proto/framework/notification/NotificationMessage\";\r\nimport {Button, FormControlLabel} from \"../../component/wrapper/MuiWrappers\";\r\nimport {queryNotification} from \"./NotificationService\";\r\nimport AlertContext from \"../../context/AlertContext\";\r\nimport {NotificationContext} from \"../../context/NotificationContext\";\r\n\r\ntype NotificationWidgetProps = {} & StackProps;\r\n\r\n// filter by unread, mark all as read\r\n\r\nconst NotificationWidget = ({sx, ...rest}: NotificationWidgetProps) => {\r\n\r\n  const {showAlert} = React.useContext(AlertContext)\r\n  const {ack} = React.useContext(NotificationContext);\r\n  const [notifications, setNotifications] = React.useState<NotificationProfile[]>([]);\r\n  const [unreadOnly, setUnreadOnly] = React.useState<boolean>(true);\r\n  const [refresh, setRefresh] = React.useState<boolean>(false);\r\n  const [page, setPage] = React.useState<number>(0);\r\n  const pageSize = 100;\r\n  const [total, setTotal] = React.useState<number>(1);\r\n\r\n  // const hasUnread = notifications.some((item) => {\r\n  //   return !item.read;\r\n  // });\r\n\r\n  useEffect(() => {\r\n    // setNotifications(fakeData);\r\n\r\n    queryNotification(unreadOnly, pageSize, page).then((res) => {\r\n      setNotifications(res.notifications);\r\n      setTotal(res.pageResult?.totalPage || 1);\r\n    }).catch((e) => {\r\n      showAlert(e.message, \"error\");\r\n    });\r\n  }, [unreadOnly, refresh, page]);\r\n\r\n\r\n  return <Stack direction={\"column\"} spacing={1} sx={{marginX: 1, ...sx}}  {...rest}>\r\n    <Stack direction={\"row\"} spacing={1} justifyContent={\"space-between\"}>\r\n      <Button\r\n          variant={\"contained\"}\r\n          disableElevation={true}\r\n          onClick={() => {\r\n            // filter the id of all un read notifications\r\n            const ids = notifications.filter((item) => {\r\n              return !item.read;\r\n            }).map((item) => {\r\n              return item.id;\r\n            });\r\n            if (ids.length === 0) {\r\n              return;\r\n            }\r\n            // mark them as read\r\n            ack(ids).then(() => {\r\n              setRefresh(!refresh);\r\n            }).catch((e) => {\r\n                  showAlert(e.message, \"error\");\r\n                }\r\n            );\r\n          }}>{\"Mark All As Read\"}</Button>\r\n      <FormControlLabel control={<Switch checked={unreadOnly}\r\n                                         onChange={(event) => {\r\n                                           setUnreadOnly(event.target.checked);\r\n                                         }}\r\n\r\n      />} label=\"Show Unread Only\"/>\r\n    </Stack>\r\n    <ListComponent data={notifications} renderItem={(item, index) => {\r\n      return <Stack direction={\"column\"} key={item.id} spacing={1}>\r\n        <NotificationItem notification={item} onRead={() => {\r\n          return ack([item.id]).catch((e) => {\r\n            showAlert(e.message, \"error\");\r\n          });\r\n        }}\r\n        />\r\n        <Divider/>\r\n      </Stack>;\r\n    }}/>\r\n  </Stack>;\r\n};\r\n\r\nexport default NotificationWidget;"],"names":["createSvgIcon","_jsx","cx","cy","r","d","_ref","notification","onRead","rest","navigate","useSmartNavigate","read","setRead","React","t","useTranslation","ack","useCallback","then","id","onNotificationClick","link","_jsxs","Stack","justifyContent","direction","spacing","children","sender","ProfileAvatar","title","name","avatarUrl","sx","width","height","profileLink","get_customer_url","flexGrow","alignItems","className","onMouseEnter","onClick","length","Typography","variant","count","MarkChatReadIcon","color","MarkUnreadChatAltIcon","content","enableTranslate","timeForRender","createAt","ImageContainer","src","maxWidth","maxHeight","showAlert","AlertContext","NotificationContext","notifications","setNotifications","unreadOnly","setUnreadOnly","refresh","setRefresh","page","setPage","total","setTotal","useEffect","queryNotification","res","_res$pageResult","pageResult","totalPage","catch","e","message","marginX","Button","disableElevation","ids","filter","item","map","FormControlLabel","control","Switch","checked","onChange","event","target","label","ListComponent","data","renderItem","index","NotificationItem","Divider"],"sourceRoot":""}