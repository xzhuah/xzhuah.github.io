{"version":3,"file":"static/js/417.2acf2dbf.chunk.js","mappings":"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","sources":["component/input/FunctionalTextArea.tsx","proto/application/aichat/AiChatMessage.ts","domain/aiChatroom/service/AiChatService.ts","component/text/MarkdownArea.tsx","component/button/CopyButton.tsx","domain/aiChatroom/component/ChatRecord.tsx","domain/aiChatroom/component/ThreadProfileItem.tsx","domain/aiChatroom/AiChatRoom.tsx","api/util/algorithms.ts"],"sourcesContent":["import * as React from 'react';\r\nimport {Stack, TextField, TextFieldProps} from '@mui/material';\r\n\r\ntype FunctionalTextAreaProps = {\r\n  minRows?: number;\r\n  children?: React.ReactNode | React.ReactNode[];\r\n  inputSlotProps?: any;\r\n  extraSlotProps?: any;\r\n} & Omit<TextFieldProps, \"multiline\">;\r\nconst FunctionalTextArea = ({\r\n                              minRows = 1,\r\n                              children,\r\n                              inputSlotProps = {},\r\n                              extraSlotProps = {},\r\n                              ...rest\r\n                            }: FunctionalTextAreaProps) => {\r\n  return <TextField\r\n      slotProps={{\r\n        input: {\r\n          endAdornment: (\r\n              <Stack direction={\"row\"} alignItems={\"center\"} sx={{alignSelf: \"flex-end\"}}>\r\n                {children}\r\n              </Stack>\r\n          ),\r\n          ...inputSlotProps\r\n        },\r\n        ...extraSlotProps\r\n      }}\r\n      minRows={minRows}\r\n      fullWidth\r\n      multiline\r\n      {...rest}\r\n  />\r\n};\r\n\r\nexport default FunctionalTextArea;","// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v2.0.2\n//   protoc               v5.28.0\n// source: mydimension/application/aichat/AiChatMessage.proto\n\n/* eslint-disable */\nimport {BinaryReader, BinaryWriter} from \"@bufbuild/protobuf/wire\";\nimport {PageResult} from \"../../framework/QueryMessage\";\nimport {CustomerProfile} from \"../../framework/customer/CustomerInfo\";\n\nexport const protobufPackage = \"proto.application.aichat\";\n\nexport interface AiChatRecordMessage {\n  /** user, system, assistant (ChatMessageRole) */\n  role: string;\n  model: string;\n  message: string;\n  /** time in miliseconds */\n  createAt: number;\n}\n\nexport interface AiChatThreadMessage {\n  threadId: string;\n  title: string;\n  isPubic: boolean;\n  owner: CustomerProfile | undefined;\n  messages: AiChatRecordMessage[];\n  /** time in miliseconds */\n  lastModifiedAt: number;\n}\n\nexport interface AiChatThreadMessageList {\n  pageResult: PageResult | undefined;\n  threads: AiChatThreadMessage[];\n}\n\nexport interface TalkToAiRequest {\n  message: string;\n  model: string;\n  threadId: string;\n}\n\nfunction createBaseAiChatRecordMessage(): AiChatRecordMessage {\n  return { role: \"\", model: \"\", message: \"\", createAt: 0 };\n}\n\nexport const AiChatRecordMessage = {\n  encode(message: AiChatRecordMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.role !== \"\") {\n      writer.uint32(10).string(message.role);\n    }\n    if (message.model !== \"\") {\n      writer.uint32(18).string(message.model);\n    }\n    if (message.message !== \"\") {\n      writer.uint32(26).string(message.message);\n    }\n    if (message.createAt !== 0) {\n      writer.uint32(32).int64(message.createAt);\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): AiChatRecordMessage {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAiChatRecordMessage();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.role = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.model = reader.string();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.message = reader.string();\n          continue;\n        case 4:\n          if (tag !== 32) {\n            break;\n          }\n\n          message.createAt = longToNumber(reader.int64());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AiChatRecordMessage {\n    return {\n      role: isSet(object.role) ? globalThis.String(object.role) : \"\",\n      model: isSet(object.model) ? globalThis.String(object.model) : \"\",\n      message: isSet(object.message) ? globalThis.String(object.message) : \"\",\n      createAt: isSet(object.createAt) ? globalThis.Number(object.createAt) : 0,\n    };\n  },\n\n  toJSON(message: AiChatRecordMessage): unknown {\n    const obj: any = {};\n    if (message.role !== \"\") {\n      obj.role = message.role;\n    }\n    if (message.model !== \"\") {\n      obj.model = message.model;\n    }\n    if (message.message !== \"\") {\n      obj.message = message.message;\n    }\n    if (message.createAt !== 0) {\n      obj.createAt = Math.round(message.createAt);\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<AiChatRecordMessage>, I>>(base?: I): AiChatRecordMessage {\n    return AiChatRecordMessage.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<AiChatRecordMessage>, I>>(object: I): AiChatRecordMessage {\n    const message = createBaseAiChatRecordMessage();\n    message.role = object.role ?? \"\";\n    message.model = object.model ?? \"\";\n    message.message = object.message ?? \"\";\n    message.createAt = object.createAt ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseAiChatThreadMessage(): AiChatThreadMessage {\n  return { threadId: \"\", title: \"\", isPubic: false, owner: undefined, messages: [], lastModifiedAt: 0 };\n}\n\nexport const AiChatThreadMessage = {\n  encode(message: AiChatThreadMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.threadId !== \"\") {\n      writer.uint32(10).string(message.threadId);\n    }\n    if (message.title !== \"\") {\n      writer.uint32(18).string(message.title);\n    }\n    if (message.isPubic !== false) {\n      writer.uint32(24).bool(message.isPubic);\n    }\n    if (message.owner !== undefined) {\n      CustomerProfile.encode(message.owner, writer.uint32(34).fork()).join();\n    }\n    for (const v of message.messages) {\n      AiChatRecordMessage.encode(v!, writer.uint32(42).fork()).join();\n    }\n    if (message.lastModifiedAt !== 0) {\n      writer.uint32(48).int64(message.lastModifiedAt);\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): AiChatThreadMessage {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAiChatThreadMessage();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.threadId = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.title = reader.string();\n          continue;\n        case 3:\n          if (tag !== 24) {\n            break;\n          }\n\n          message.isPubic = reader.bool();\n          continue;\n        case 4:\n          if (tag !== 34) {\n            break;\n          }\n\n          message.owner = CustomerProfile.decode(reader, reader.uint32());\n          continue;\n        case 5:\n          if (tag !== 42) {\n            break;\n          }\n\n          message.messages.push(AiChatRecordMessage.decode(reader, reader.uint32()));\n          continue;\n        case 6:\n          if (tag !== 48) {\n            break;\n          }\n\n          message.lastModifiedAt = longToNumber(reader.int64());\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AiChatThreadMessage {\n    return {\n      threadId: isSet(object.threadId) ? globalThis.String(object.threadId) : \"\",\n      title: isSet(object.title) ? globalThis.String(object.title) : \"\",\n      isPubic: isSet(object.isPubic) ? globalThis.Boolean(object.isPubic) : false,\n      owner: isSet(object.owner) ? CustomerProfile.fromJSON(object.owner) : undefined,\n      messages: globalThis.Array.isArray(object?.messages)\n        ? object.messages.map((e: any) => AiChatRecordMessage.fromJSON(e))\n        : [],\n      lastModifiedAt: isSet(object.lastModifiedAt) ? globalThis.Number(object.lastModifiedAt) : 0,\n    };\n  },\n\n  toJSON(message: AiChatThreadMessage): unknown {\n    const obj: any = {};\n    if (message.threadId !== \"\") {\n      obj.threadId = message.threadId;\n    }\n    if (message.title !== \"\") {\n      obj.title = message.title;\n    }\n    if (message.isPubic !== false) {\n      obj.isPubic = message.isPubic;\n    }\n    if (message.owner !== undefined) {\n      obj.owner = CustomerProfile.toJSON(message.owner);\n    }\n    if (message.messages?.length) {\n      obj.messages = message.messages.map((e) => AiChatRecordMessage.toJSON(e));\n    }\n    if (message.lastModifiedAt !== 0) {\n      obj.lastModifiedAt = Math.round(message.lastModifiedAt);\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<AiChatThreadMessage>, I>>(base?: I): AiChatThreadMessage {\n    return AiChatThreadMessage.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<AiChatThreadMessage>, I>>(object: I): AiChatThreadMessage {\n    const message = createBaseAiChatThreadMessage();\n    message.threadId = object.threadId ?? \"\";\n    message.title = object.title ?? \"\";\n    message.isPubic = object.isPubic ?? false;\n    message.owner = (object.owner !== undefined && object.owner !== null)\n      ? CustomerProfile.fromPartial(object.owner)\n      : undefined;\n    message.messages = object.messages?.map((e) => AiChatRecordMessage.fromPartial(e)) || [];\n    message.lastModifiedAt = object.lastModifiedAt ?? 0;\n    return message;\n  },\n};\n\nfunction createBaseAiChatThreadMessageList(): AiChatThreadMessageList {\n  return { pageResult: undefined, threads: [] };\n}\n\nexport const AiChatThreadMessageList = {\n  encode(message: AiChatThreadMessageList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.pageResult !== undefined) {\n      PageResult.encode(message.pageResult, writer.uint32(10).fork()).join();\n    }\n    for (const v of message.threads) {\n      AiChatThreadMessage.encode(v!, writer.uint32(18).fork()).join();\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): AiChatThreadMessageList {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseAiChatThreadMessageList();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.pageResult = PageResult.decode(reader, reader.uint32());\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.threads.push(AiChatThreadMessage.decode(reader, reader.uint32()));\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): AiChatThreadMessageList {\n    return {\n      pageResult: isSet(object.pageResult) ? PageResult.fromJSON(object.pageResult) : undefined,\n      threads: globalThis.Array.isArray(object?.threads)\n        ? object.threads.map((e: any) => AiChatThreadMessage.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: AiChatThreadMessageList): unknown {\n    const obj: any = {};\n    if (message.pageResult !== undefined) {\n      obj.pageResult = PageResult.toJSON(message.pageResult);\n    }\n    if (message.threads?.length) {\n      obj.threads = message.threads.map((e) => AiChatThreadMessage.toJSON(e));\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<AiChatThreadMessageList>, I>>(base?: I): AiChatThreadMessageList {\n    return AiChatThreadMessageList.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<AiChatThreadMessageList>, I>>(object: I): AiChatThreadMessageList {\n    const message = createBaseAiChatThreadMessageList();\n    message.pageResult = (object.pageResult !== undefined && object.pageResult !== null)\n      ? PageResult.fromPartial(object.pageResult)\n      : undefined;\n    message.threads = object.threads?.map((e) => AiChatThreadMessage.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseTalkToAiRequest(): TalkToAiRequest {\n  return { message: \"\", model: \"\", threadId: \"\" };\n}\n\nexport const TalkToAiRequest = {\n  encode(message: TalkToAiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.message !== \"\") {\n      writer.uint32(10).string(message.message);\n    }\n    if (message.model !== \"\") {\n      writer.uint32(18).string(message.model);\n    }\n    if (message.threadId !== \"\") {\n      writer.uint32(26).string(message.threadId);\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): TalkToAiRequest {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseTalkToAiRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if (tag !== 10) {\n            break;\n          }\n\n          message.message = reader.string();\n          continue;\n        case 2:\n          if (tag !== 18) {\n            break;\n          }\n\n          message.model = reader.string();\n          continue;\n        case 3:\n          if (tag !== 26) {\n            break;\n          }\n\n          message.threadId = reader.string();\n          continue;\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): TalkToAiRequest {\n    return {\n      message: isSet(object.message) ? globalThis.String(object.message) : \"\",\n      model: isSet(object.model) ? globalThis.String(object.model) : \"\",\n      threadId: isSet(object.threadId) ? globalThis.String(object.threadId) : \"\",\n    };\n  },\n\n  toJSON(message: TalkToAiRequest): unknown {\n    const obj: any = {};\n    if (message.message !== \"\") {\n      obj.message = message.message;\n    }\n    if (message.model !== \"\") {\n      obj.model = message.model;\n    }\n    if (message.threadId !== \"\") {\n      obj.threadId = message.threadId;\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<TalkToAiRequest>, I>>(base?: I): TalkToAiRequest {\n    return TalkToAiRequest.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<TalkToAiRequest>, I>>(object: I): TalkToAiRequest {\n    const message = createBaseTalkToAiRequest();\n    message.message = object.message ?? \"\";\n    message.model = object.model ?? \"\";\n    message.threadId = object.threadId ?? \"\";\n    return message;\n  },\n};\n\ntype Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;\n\nexport type DeepPartial<T> = T extends Builtin ? T\n  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>\n  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };\n\nfunction longToNumber(int64: { toString(): string }): number {\n  const num = globalThis.Number(int64.toString());\n  if (num > globalThis.Number.MAX_SAFE_INTEGER) {\n    throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n  }\n  if (num < globalThis.Number.MIN_SAFE_INTEGER) {\n    throw new globalThis.Error(\"Value is smaller than Number.MIN_SAFE_INTEGER\");\n  }\n  return num;\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n","import {pb_pbPost, pb_strPost, str_pbPost, str_strPost} from \"../../../api/util/MyDimensionClient\";\r\nimport {PageQuery} from \"../../../proto/framework/QueryMessage\";\r\nimport {\r\n  AiChatRecordMessage,\r\n  AiChatThreadMessage,\r\n  AiChatThreadMessageList,\r\n  TalkToAiRequest\r\n} from \"../../../proto/application/aichat/AiChatMessage\";\r\n\r\nconst aiChatAPIPrefix = '/api/v0/ai/chat';\r\n\r\nexport const getThreadProfile = (page: number, pageSize: number) => {\r\n  const pageQuery = PageQuery.fromJSON({page: page, pageSize: pageSize});\r\n\r\n  return pb_pbPost(aiChatAPIPrefix + \"/getThreadProfile\", PageQuery, AiChatThreadMessageList, pageQuery);\r\n}\r\n\r\nexport const getChatThread = (threadId: string) => {\r\n  return str_pbPost(aiChatAPIPrefix + \"/getChatThread\", AiChatThreadMessage, threadId);\r\n}\r\n\r\nexport const newChatThread = () => {\r\n  return str_strPost(aiChatAPIPrefix + \"/newChatThread\");\r\n}\r\n\r\nexport const setVisibility = (isPublic: boolean, threadId: string) => {\r\n  if (isPublic) {\r\n    return str_strPost(aiChatAPIPrefix + \"/make_public\", threadId);\r\n  } else {\r\n    return str_strPost(aiChatAPIPrefix + \"/make_private\", threadId);\r\n  }\r\n}\r\n\r\nexport const talkToAssistant = (message: string, threadId: string, model: string, sync = false) => {\r\n  const talkRequest = TalkToAiRequest.fromJSON({\r\n    message: message,\r\n    threadId: threadId,\r\n    model: model\r\n  });\r\n\r\n  if (sync) {\r\n    return pb_pbPost(aiChatAPIPrefix + \"/talk_sync\", TalkToAiRequest, AiChatRecordMessage, talkRequest);\r\n  }\r\n  return pb_strPost(aiChatAPIPrefix + \"/talk\", TalkToAiRequest, talkRequest);\r\n\r\n}","import {Box, BoxProps} from \"@mui/material\";\r\n\r\nimport ReactMarkdown from 'react-markdown'\r\nimport RemarkMath from \"remark-math\";\r\nimport RemarkBreaks from \"remark-breaks\";\r\nimport RehypeKatex from \"rehype-katex\";\r\nimport RemarkGfm from \"remark-gfm\";\r\nimport RehypeHighlight from \"rehype-highlight\";\r\n\r\nconst LinkRenderer = (props: any) => {\r\n  return <a target=\"_blank\" href={props.href}>\r\n    {props.children}\r\n  </a>;\r\n}\r\n\r\nconst MarkdownArea = ({children, sx, ...rest}: BoxProps) => {\r\n  return <Box sx={{...sx}} {...rest}>\r\n    <ReactMarkdown\r\n\r\n        components={{\r\n          a: LinkRenderer,\r\n        }}\r\n        remarkPlugins={[RemarkMath, RemarkGfm, RemarkBreaks]}\r\n        rehypePlugins={[\r\n          RehypeKatex,\r\n          [\r\n            RehypeHighlight,\r\n            {\r\n              detect: false,\r\n              ignoreMissing: true,\r\n            },\r\n          ],\r\n        ]}\r\n    >\r\n      {children as string}\r\n    </ReactMarkdown>\r\n\r\n  </Box>\r\n}\r\n\r\nexport default MarkdownArea;","import {IconButton, IconButtonProps} from \"@mui/material\";\r\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\r\nimport copy from 'copy-to-clipboard';\r\nimport React from \"react\";\r\n// CopyButton 是一个便捷实用按钮组件，它可以复制文本到剪贴板。\r\ntype CopyButtonProps = {\r\n  text: string | (() => string);\r\n  icon?: React.ReactNode;\r\n} & IconButtonProps;\r\n\r\n// https://stackoverflow.com/questions/57868405/safari-clipboard-error-typeerror-undefined-is-not-an-object\r\nconst CopyButton = ({text, icon = <ContentCopyIcon/>, ...rest}: CopyButtonProps) => {\r\n  return <IconButton onClick={() => {\r\n    return copy(text instanceof Function ? text() : text);\r\n  }} {...rest}>{icon}</IconButton>\r\n}\r\n\r\nexport default React.memo(CopyButton);","import {Avatar, Box, Stack, StackProps} from \"@mui/material\";\r\nimport HiveIcon from \"@mui/icons-material/Hive\";\r\nimport React from \"react\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\r\nimport MarkdownArea from \"../../../component/text/MarkdownArea\";\r\nimport CopyButton from \"../../../component/button/CopyButton\";\r\nimport {AiChatRecordMessage} from \"../../../proto/application/aichat/AiChatMessage\";\r\nimport {Typography} from \"../../../component/wrapper/MuiWrappers\";\r\n\r\ntype ChatRecordProps = {\r\n  record: AiChatRecordMessage\r\n} & StackProps\r\nconst ChatRecord = ({record, sx, ...rest}: ChatRecordProps) => {\r\n  return <><Stack direction={\"row\"}\r\n                  paddingY={2}\r\n                  maxWidth={\"100%\"}\r\n                  sx={{...sx}}\r\n                  {...rest}>\r\n    <Box marginTop={1}>\r\n      {record.role === \"assistant\" ? <Avatar sx={{bgcolor: \"primary.main\"}}\r\n                                             style={{backgroundColor: \"#e4a710\"}}><HiveIcon/></Avatar> :\r\n          <Avatar sx={{bgcolor: \"primary.main\"}}><AccountCircleIcon/></Avatar>}\r\n    </Box>\r\n    <Stack direction={\"column\"} marginX={4} textAlign={\"start\"}>\r\n      <Typography variant={\"caption\"}>\r\n        {new Date(record.createAt).toLocaleString()} {record.role === \"assistant\" ? `(${record.model})` : \"\"}\r\n      </Typography>\r\n      <Stack direction={\"row\"} flexGrow={1} textAlign={\"start\"}>\r\n        <MarkdownArea>\r\n          {record.message}\r\n        </MarkdownArea>\r\n        <CopyButton sx={{alignSelf: \"flex-start\", marginTop: 1}} text={rest.children as string}/>\r\n      </Stack>\r\n\r\n    </Stack>\r\n\r\n  </Stack>\r\n    <Divider sx={{width: \"100%\"}}/>\r\n  </>;\r\n}\r\n\r\n\r\nexport default React.memo(ChatRecord);","// @flow\r\nimport * as React from 'react';\r\nimport {AiChatThreadMessage} from \"../../../proto/application/aichat/AiChatMessage\";\r\nimport {MenuItemProps} from \"@mui/material/MenuItem\";\r\nimport {ListItemText, MenuItem} from \"../../../component/wrapper/MuiWrappers\";\r\n\r\ntype ThreadProfileItemProps = {\r\n  profile: AiChatThreadMessage\r\n} & MenuItemProps;\r\nexport const ThreadProfileItem = ({profile, ...rest}: ThreadProfileItemProps) => {\r\n  return (\r\n      <MenuItem\r\n          key={profile.threadId}\r\n          sx={{\r\n            width: \"100%\",\r\n            textAlign: \"start\",\r\n            textOverflow: \"ellipsis\",\r\n            whiteSpace: \"nowrap\",\r\n            overflow: \"hidden\",\r\n            minHeight: \"2rem\"\r\n          }} {...rest}> <ListItemText\r\n          enableTranslate={false}>{profile.title}</ListItemText></MenuItem>\r\n  );\r\n};","// @flow\r\nimport * as React from 'react';\r\nimport {ReactNode, useCallback, useEffect, useMemo, useRef} from 'react';\r\nimport {\r\n  Autocomplete,\r\n  CircularProgress,\r\n  Divider,\r\n  Drawer,\r\n  IconButton,\r\n  MenuList,\r\n  Stack,\r\n  Switch\r\n} from \"@mui/material\";\r\nimport {\r\n  Button,\r\n  FormControlLabel,\r\n  LoadingButton,\r\n  TextField,\r\n  Typography\r\n} from \"../../component/wrapper/MuiWrappers\";\r\nimport {\r\n  getChatThread,\r\n  getThreadProfile,\r\n  newChatThread,\r\n  setVisibility,\r\n  talkToAssistant\r\n} from \"./service/AiChatService\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nimport {AutocompleteRenderInputParams} from \"@mui/material/Autocomplete/Autocomplete\";\r\nimport {print} from \"../../api/util/Logging\";\r\nimport {useProtoSocket} from \"../../hook/CommonUiHook\";\r\nimport {TextareaAutosize} from '@mui/base';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport HistoryIcon from '@mui/icons-material/History';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {\r\n  AiChatRecordMessage,\r\n  AiChatThreadMessage\r\n} from \"../../proto/application/aichat/AiChatMessage\";\r\nimport ChatRecord from \"./component/ChatRecord\";\r\nimport {useSearchParams} from \"react-router-dom\";\r\nimport BreakpointContainer from \"../../component/container/BreakpointContainer\";\r\nimport {deduplicate} from \"../../api/util/algorithms\";\r\nimport AlertContext from \"../../context/AlertContext\";\r\nimport {ThreadProfileItem} from \"./component/ThreadProfileItem\";\r\nimport ListComponent from \"../../component/container/ListComponent\";\r\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\r\nimport EmojiTextField from \"../../component/input/EmojiTextField\";\r\nimport FunctionalTextArea from \"../../component/input/FunctionalTextArea\";\r\n\r\n// https://platform.openai.com/docs/models/gpt-4\r\nconst allModels = [\r\n  \"gpt-4o\",\r\n  \"gpt-4o-mini\",\r\n  \"gpt-4-turbo\",\r\n  \"gpt-4\",\r\n  \"gpt-3.5-turbo\",\r\n  \"gpt-3.5-turbo-16k\"];\r\n\r\nexport const AiChatRoom = () => {\r\n  const {t} = useTranslation();\r\n  const [newMessage, setNewMessage] = React.useState<string>(\"\");\r\n  const {showAlert} = React.useContext(AlertContext)\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  // const [threadId, setThreadId] = React.useState<string>(\"\");\r\n  const threadId = searchParams.get(\"id\");\r\n\r\n  const [messages, setMessages] = React.useState<AiChatRecordMessage[]>([]);\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n  // const [syncing, setSyncing] = React.useState<boolean>(false);\r\n  const [currentModel, setCurrentModel] = React.useState<string>(allModels[0]);\r\n  const [threadProfiles, setThreadProfiles] = React.useState<AiChatThreadMessage[]>([]);\r\n  const [maxPage, setMaxPage] = React.useState<number>(0);\r\n  const [currentThreadProfilePage, setCurrentThreadProfilePage] = React.useState<number>(0);\r\n  const [leftDrawerState, setLeftDrawerState] = React.useState(false);\r\n  const [isPublic, setIsPublic] = React.useState<boolean>(false);\r\n  const pageSize = 10;\r\n\r\n\r\n  const bottomRef = useRef<null | HTMLDivElement>(null);\r\n  const inputRef = useRef<null | HTMLDivElement>(null);\r\n\r\n  const {\r\n    filteredMessages,\r\n    setSinceTime,\r\n    connected\r\n  } = useProtoSocket(AiChatRecordMessage, \"chatai\", threadId ?? void 0, false, new Date().getTime());\r\n\r\n  if (filteredMessages !== undefined && filteredMessages.length > 0) {\r\n    if (filteredMessages[0] !== undefined && messages.length > 0) {\r\n      if (filteredMessages[0].message === messages[messages.length - 1].message\r\n          && filteredMessages[0].role === messages[messages.length - 1].role) {\r\n        filteredMessages.shift();\r\n      }\r\n    }\r\n  }\r\n\r\n  const combinedMessages = useMemo(() => deduplicate(([...messages, ...filteredMessages].filter((record) => {\r\n    return record !== undefined;\r\n  }) as AiChatRecordMessage[])\r\n  .sort((a, b) => {\r\n    return a.createAt - b.createAt;\r\n  }), (a, b) => {\r\n    return a.message === b.message && a.role === b.role && a.createAt === b.createAt;\r\n  }), [messages, filteredMessages]);\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      inputRef.current?.focus();\r\n    }\r\n  }, [loading]);\r\n\r\n  useEffect(() => {\r\n    getThreadProfile(currentThreadProfilePage, pageSize).then((response) => {\r\n      setThreadProfiles(response.threads);\r\n      if (response.pageResult) {\r\n        setMaxPage(response.pageResult.totalPage - 1);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (threadId) {\r\n      getChatThread(threadId).then((response) => {\r\n        if (response) {\r\n          setMessages(response.messages);\r\n          setIsPublic(response.isPubic);\r\n        }\r\n      }).catch((error) => {\r\n        showAlert(\"Chat not found\", \"error\");\r\n        setSearchParams({});\r\n        print(error);\r\n      });\r\n    } else {\r\n      setMessages([]);\r\n    }\r\n  }, [searchParams]);\r\n\r\n  useEffect(() => {\r\n    // 👇️ scroll to bottom every time messages change\r\n    bottomRef.current?.scrollIntoView({behavior: 'smooth', block: 'end'});\r\n\r\n  }, [combinedMessages]);\r\n\r\n  const loadMoreThreadProfile = () => {\r\n    if (currentThreadProfilePage < maxPage) {\r\n      getThreadProfile(currentThreadProfilePage + 1, pageSize).then((response) => {\r\n        setThreadProfiles([...threadProfiles, ...response.threads]);\r\n        setCurrentThreadProfilePage(currentThreadProfilePage + 1);\r\n        if (response.pageResult) {\r\n          setMaxPage(response.pageResult.totalPage - 1);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  const sendMessage = () => {\r\n    if (newMessage === \"\") {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    const newMessageRecord = AiChatRecordMessage.create();\r\n    newMessageRecord.message = newMessage;\r\n    newMessageRecord.role = \"user\";\r\n    newMessageRecord.createAt = Date.now();\r\n\r\n    setMessages((oldMessages) => [...oldMessages, newMessageRecord]);\r\n    if (!threadId) {\r\n      newChatThread().then((response) => {\r\n        const newThreadId = response;\r\n        talkToAssistant(newMessage, response, currentModel, !connected).then((response) => {\r\n          if (typeof response !== \"string\") {\r\n            setMessages((oldMessages) => [...oldMessages, response]);\r\n          }\r\n          setSearchParams({id: newThreadId});\r\n          setLoading(false);\r\n          setNewMessage(\"\");\r\n        });\r\n      });\r\n    } else {\r\n      talkToAssistant(newMessage, threadId, currentModel, !connected).then((response) => {\r\n        if (typeof response !== \"string\") {\r\n          setMessages((oldMessages) => [...oldMessages, response]);\r\n        }\r\n        setLoading(false);\r\n        setNewMessage(\"\");\r\n      });\r\n    }\r\n  }\r\n\r\n  const checkKeyPress = useCallback(async (e: KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      if (e.ctrlKey || e.shiftKey) {\r\n        e.preventDefault();\r\n        await sendMessage();\r\n      }\r\n    }\r\n  }, [newMessage]);\r\n\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", checkKeyPress);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", checkKeyPress);\r\n    };\r\n  }, [checkKeyPress]);\r\n\r\n  return <Stack direction={\"row\"} justifyContent={\"start\"} alignItems={\"start\"} spacing={0}\r\n                width={\"100%\"}\r\n                height={\"89dvh\"}>\r\n    <BreakpointContainer up={\"md\"}>\r\n      <Stack direction={\"column\"}\r\n             alignItems={\"flex-start\"}\r\n             height={\"100%\"}\r\n             width={\"20%\"}\r\n             minWidth={\"250px\"}\r\n             spacing={0}\r\n             sx={{\r\n               paddingX: \"5px\",\r\n               overflowY: \"auto\",\r\n               textOverflow: \"ellipsis\",\r\n               backgroundColor: \"#f1f1f1\",\r\n               borderRadius: \"5px\"\r\n             }}>\r\n        <Stack direction={\"row\"} justifyContent={\"center\"} width={\"100%\"} paddingTop={2}>\r\n          <Typography variant={\"h6\"}>{\"Chat History\"}</Typography>\r\n        </Stack>\r\n\r\n        <MenuList dense sx={{width: \"100%\"}}>\r\n          <ListComponent data={threadProfiles} renderItem={(profile) => {\r\n            return <Stack key={profile.threadId} direction={\"column\"}>\r\n              <ThreadProfileItem key={profile.threadId} profile={profile}\r\n                                 onClick={() => {\r\n                                   setSearchParams({id: profile.threadId});\r\n                                 }}/>\r\n              <Divider/>\r\n            </Stack>\r\n          }}/>\r\n        </MenuList>\r\n\r\n        {(currentThreadProfilePage < maxPage) &&\r\n            <Button onClick={loadMoreThreadProfile}>{\"Load More\"}</Button>}\r\n      </Stack>\r\n    </BreakpointContainer>\r\n\r\n    <BreakpointContainer down={\"md\"}>\r\n      <Drawer\r\n          anchor={\"left\"}\r\n          open={leftDrawerState}\r\n          onClose={() => setLeftDrawerState(false)}\r\n          className={\"blurDialog\"}\r\n      >\r\n        <Stack direction={\"column\"}\r\n               alignItems={\"flex-start\"}\r\n               width={\"70dvw\"}\r\n               spacing={0}\r\n               sx={{padding: \"20px\", overflowY: \"auto\", textOverflow: \"ellipsis\"}}>\r\n          <Stack direction={\"row\"} justifyContent={\"center\"} width={\"100%\"}>\r\n            <Typography variant={\"h6\"} flexGrow={1}>{\"Chat History\"}</Typography>\r\n            <IconButton\r\n                sx={{marginRight: \"8px\"}}\r\n                onClick={() => {\r\n                  setLeftDrawerState(false);\r\n                }}>\r\n              <ArrowBackIcon/>\r\n            </IconButton>\r\n          </Stack>\r\n          <ListComponent data={[...threadProfiles]} renderItem={(profile) => {\r\n            return <Stack key={profile.threadId} direction={\"column\"}\r\n                          width={\"100%\"}><ThreadProfileItem profile={profile}\r\n                                                            onClick={() => {\r\n                                                              setSearchParams({id: profile.threadId});\r\n                                                              setLeftDrawerState(false);\r\n                                                            }}/>\r\n              <Divider/>\r\n            </Stack>\r\n          }}/>\r\n          {(currentThreadProfilePage < maxPage) &&\r\n              <Button onClick={loadMoreThreadProfile}>{\"Load More\"}</Button>}\r\n        </Stack>\r\n      </Drawer>\r\n    </BreakpointContainer>\r\n\r\n\r\n    <Stack direction={\"column\"} alignItems={\"flex-start\"} sx={{\r\n      width: {\r\n        xs: \"100%\",\r\n        md: \"85%\"\r\n      },\r\n      height: \"100%\",\r\n    }}>\r\n      <Stack direction={\"row\"} justifyContent={\"start\"} alignItems={\"center\"} width={\"100%\"}\r\n             spacing={2}>\r\n        <BreakpointContainer down={\"md\"}>\r\n          <IconButton aria-label={\"menu\"} onClick={() => {\r\n            setLeftDrawerState(true);\r\n          }\r\n          }\r\n                      sx={{justifySelf: \"flex-start\"}}>\r\n            <HistoryIcon/>\r\n          </IconButton>\r\n        </BreakpointContainer>\r\n        <Autocomplete options={allModels}\r\n                      sx={{\r\n                        flexGrow: 1\r\n                      }}\r\n                      value={currentModel}\r\n                      onChange={(event, newValue) =>\r\n                          setCurrentModel(newValue as string)\r\n                      }\r\n                      renderInput={(params: AutocompleteRenderInputParams) =>\r\n                          <TextField {...params}\r\n                                     label={t(\"Model\")}/>}/>\r\n        {(threadId !== null && threadId.length > 0) &&\r\n            <FormControlLabel control={<Switch checked={isPublic}\r\n                                               onChange={(event) => {\r\n                                                 const toCheck = event.target.checked;\r\n                                                 setVisibility(toCheck, threadId).then((response) => {\r\n                                                   setIsPublic(toCheck);\r\n                                                   if (toCheck) {\r\n                                                     showAlert(\"You can send the link of this chat to other people to let them join this chat!\", \"success\");\r\n                                                   }\r\n                                                 }).catch((error) => {\r\n                                                   showAlert(error.message, \"error\");\r\n                                                 });\r\n                                               }}\r\n\r\n            />} label=\"Sharing\"/>}\r\n        <IconButton onClick={() => {\r\n          setSearchParams({});\r\n          setMessages([]);\r\n          setCurrentThreadProfilePage(0);\r\n\r\n          getThreadProfile(0, pageSize).then((response) => {\r\n            setThreadProfiles(response.threads);\r\n            if (response.pageResult) {\r\n              setMaxPage(response.pageResult.totalPage - 1);\r\n            }\r\n          });\r\n          setSinceTime(Date.now());\r\n          inputRef.current?.focus();\r\n        }\r\n        }><AddIcon/></IconButton>\r\n      </Stack>\r\n\r\n      <Stack direction={\"column\"} alignItems={\"flex-start\"} flexGrow={1}\r\n             sx={{\r\n               width: \"100%\"\r\n             }}\r\n             overflow={\"auto\"} textOverflow={\"ellipsis\"} className={\"hideScrollBar\"}>\r\n\r\n        <ListComponent data={[...combinedMessages,]} renderItem={(record, index) => {\r\n          return <ChatRecord key={index} record={record}\r\n                             paddingX={2}/>;\r\n        }}/>\r\n        <div ref={bottomRef}/>\r\n\r\n      </Stack>\r\n\r\n      <Stack direction={\"row\"}\r\n             width={\"100%\"}\r\n             justifyContent={\"center\"} alignItems={\"flex-end\"} spacing={2}>\r\n        <FunctionalTextArea minRows={3}\r\n                            value={newMessage}\r\n                            inputSlotProps={{sx: {borderRadius: \"0px\"}}}\r\n                            style={{borderRadius: \"0px\"}}\r\n                            onChange={(event) => {\r\n                              setNewMessage(event.target.value);\r\n                            }}\r\n                            placeholder={t(\"Ctrl + Enter to Send a message\")}\r\n        >\r\n          <IconButton\r\n              disabled={newMessage.length === 0 || loading}\r\n              onClick={sendMessage}>\r\n            {loading ? <CircularProgress size={24}/> : <SendIcon/>}\r\n          </IconButton>\r\n        </FunctionalTextArea>\r\n      </Stack>\r\n    </Stack>\r\n\r\n  </Stack>;\r\n};\r\n\r\nexport default React.memo(AiChatRoom);","export const deduplicate = <T>(list: T[], compareFn: (a: T, b: T) => boolean) => {\r\n  return list.reduce((accumulator, current) => {\r\n    if (!accumulator.some(item => compareFn(item, current))) {\r\n      accumulator.push(current);\r\n    }\r\n    return accumulator;\r\n  }, [] as T[]);\r\n}\r\n"],"names":["_ref","minRows","children","inputSlotProps","extraSlotProps","rest","_jsx","TextField","slotProps","input","endAdornment","Stack","direction","alignItems","sx","alignSelf","fullWidth","multiline","AiChatRecordMessage","encode","message","writer","arguments","length","undefined","BinaryWriter","role","uint32","string","model","createAt","int64","decode","reader","BinaryReader","end","len","pos","tag","longToNumber","skip","fromJSON","object","isSet","globalThis","String","Number","toJSON","obj","Math","round","create","base","fromPartial","_object$role","_object$model","_object$message","_object$createAt","AiChatThreadMessage","threadId","title","isPubic","bool","owner","CustomerProfile","fork","join","v","messages","lastModifiedAt","push","Boolean","Array","isArray","map","e","_message$messages","_object$threadId","_object$title","_object$isPubic","_object$messages","_object$lastModifiedA","AiChatThreadMessageList","pageResult","PageResult","threads","_message$threads","_object$threads","TalkToAiRequest","_object$message2","_object$model2","_object$threadId2","num","toString","MAX_SAFE_INTEGER","Error","MIN_SAFE_INTEGER","value","aiChatAPIPrefix","getThreadProfile","page","pageSize","pageQuery","PageQuery","pb_pbPost","talkToAssistant","sync","talkRequest","pb_strPost","LinkRenderer","props","target","href","Box","ReactMarkdown","components","a","remarkPlugins","RemarkMath","RemarkGfm","RemarkBreaks","rehypePlugins","RehypeKatex","RehypeHighlight","detect","ignoreMissing","CopyButton","text","icon","ContentCopyIcon","IconButton","onClick","copy","Function","React","ChatRecord","record","_jsxs","_Fragment","paddingY","maxWidth","marginTop","Avatar","bgcolor","style","backgroundColor","HiveIcon","AccountCircleIcon","marginX","textAlign","Typography","variant","Date","toLocaleString","flexGrow","MarkdownArea","Divider","width","ThreadProfileItem","profile","MenuItem","textOverflow","whiteSpace","overflow","minHeight","ListItemText","enableTranslate","allModels","AiChatRoom","t","useTranslation","newMessage","setNewMessage","showAlert","AlertContext","searchParams","setSearchParams","useSearchParams","get","setMessages","loading","setLoading","currentModel","setCurrentModel","threadProfiles","setThreadProfiles","maxPage","setMaxPage","currentThreadProfilePage","setCurrentThreadProfilePage","leftDrawerState","setLeftDrawerState","isPublic","setIsPublic","bottomRef","useRef","inputRef","filteredMessages","setSinceTime","connected","useProtoSocket","getTime","shift","combinedMessages","useMemo","deduplicate","list","filter","sort","b","compareFn","reduce","accumulator","current","some","item","useEffect","_inputRef$current","focus","then","response","totalPage","str_pbPost","getChatThread","catch","error","print","_bottomRef$current","scrollIntoView","behavior","block","loadMoreThreadProfile","sendMessage","newMessageRecord","now","oldMessages","str_strPost","newThreadId","id","checkKeyPress","useCallback","async","key","ctrlKey","shiftKey","preventDefault","window","addEventListener","removeEventListener","justifyContent","spacing","height","BreakpointContainer","up","minWidth","paddingX","overflowY","borderRadius","paddingTop","MenuList","dense","ListComponent","data","renderItem","Button","down","Drawer","anchor","open","onClose","className","padding","marginRight","ArrowBackIcon","xs","md","justifySelf","HistoryIcon","Autocomplete","options","onChange","event","newValue","renderInput","params","label","FormControlLabel","control","Switch","checked","toCheck","setVisibility","_inputRef$current2","AddIcon","index","ref","FunctionalTextArea","placeholder","disabled","CircularProgress","size","SendIcon"],"sourceRoot":""}