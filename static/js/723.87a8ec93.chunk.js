"use strict";(self.webpackChunkmy_dimension_client=self.webpackChunkmy_dimension_client||[]).push([[723],{67723:(e,f,n)=>{n.r(f),n.d(f,{MmdPluginMaterial:()=>a});var o=n(16159),r=n(69312),i=n(9159),l=n(92412),s=n(21752);class a extends r.ZL{isCompatible(e){return e===o.w.WGSL}getCustomCode(e){if("vertex"===e){const e={};return e.CUSTOM_VERTEX_DEFINITIONS=l.B,e[`!${(0,i.N)("finalWorld=finalWorld*influence;")}`]=`\n${s.Z}\nfinalWorld=(finalWorld*influence);\n`,e}if("fragment"===e){const e={CUSTOM_FRAGMENT_DEFINITIONS:"\n#if defined(SPHERE_TEXTURE) && defined(NORMAL)\nvar sphereSamplerSampler: sampler;var sphereSampler: texture_2d<f32>;\n#endif\n#ifdef TOON_TEXTURE\nvar toonSamplerSampler: sampler;var toonSampler: texture_2d<f32>;\n#endif\n",CUSTOM_FRAGMENT_MAIN_BEGIN:"\n#ifdef TOON_TEXTURE\nvar toonNdl: vec3f;\n#endif\n"};e[`!${(0,i.N)("var diffuseColor: vec3f=uniforms.vDiffuseColor.rgb;")}`]="\n#ifdef APPLY_AMBIENT_COLOR_TO_DIFFUSE\nvar diffuseColor: vec3f=clamp(uniforms.vDiffuseColor.rgb+uniforms.vAmbientColor,vec3f(0.0),vec3f(1.0));\n#else\nvar diffuseColor: vec3f=(uniforms.vDiffuseColor.rgb);\n#endif\n",e[`!${(0,i.N)("var alpha: f32=uniforms.vDiffuseColor.a;")}`]="\n#ifdef CLAMP_ALPHA\nvar alpha: f32=clamp(uniforms.vDiffuseColor.a,0.0,1.0);\n#else\nvar alpha: f32=uniforms.vDiffuseColor.a;\n#endif\n",e[`!${(0,i.N)("baseColor=textureSample(diffuseSampler,diffuseSamplerSampler,fragmentInputs.vDiffuseUV+uvOffset);")}`]="\n#if defined(DIFFUSE) && defined(TEXTURE_COLOR)\nbaseColor=textureSample(diffuseSampler,diffuseSamplerSampler,(fragmentInputs.vDiffuseUV+uvOffset));baseColor=vec4f(\nmix(\nvec3f(1.0),\nbaseColor.rgb*uniforms.textureMultiplicativeColor.rgb,\nuniforms.textureMultiplicativeColor.a\n),\nbaseColor.a\n);baseColor=vec4f(\nclamp(\nbaseColor.rgb+(baseColor.rgb-vec3f(1.0))*uniforms.textureAdditiveColor.a,\nvec3f(0.0),\nvec3f(1.0)\n)+uniforms.textureAdditiveColor.rgb,\nbaseColor.a\n);\n#else\nbaseColor=textureSample(diffuseSampler,diffuseSamplerSampler,(fragmentInputs.vDiffuseUV+uvOffset));\n#endif\n",e[`!${(0,i.N)("struct lightingInfo\n{")}`]="\nstruct lightingInfo {\n#ifdef TOON_TEXTURE\n#ifndef NDOTL\nndl: f32,\n#endif\nisToon: f32,\n#endif\n",e[`!${(0,i.N)("result.diffuse=ndl*diffuseColor*attenuation;")}`]="\n#ifdef TOON_TEXTURE\nresult.diffuse=diffuseColor*attenuation;result.ndl=ndl;result.isToon=1.0;\n#elif defined(IGNORE_DIFFUSE_WHEN_TOON_TEXTURE_DISABLED)\nresult.diffuse=diffuseColor*attenuation;\n#else\nresult.diffuse=(ndl*diffuseColor*attenuation);\n#endif\n",e[`!${(0,i.N)("diffuseBase+=info.diffuse*shadow;")}`]="\n#ifdef TOON_TEXTURE\ntoonNdl=vec3f(clamp(info.ndl*shadow,0.02,0.98));toonNdl.r=textureSample(toonSampler,toonSamplerSampler,vec2f(0.5,toonNdl.r)).r;toonNdl.g=textureSample(toonSampler,toonSamplerSampler,vec2f(0.5,toonNdl.g)).g;toonNdl.b=textureSample(toonSampler,toonSamplerSampler,vec2f(0.5,toonNdl.b)).b;\n#ifdef TOON_TEXTURE_COLOR\ntoonNdl=mix(\nvec3f(1.0),\ntoonNdl*uniforms.toonTextureMultiplicativeColor.rgb,\nuniforms.toonTextureMultiplicativeColor.a\n);toonNdl=clamp(\ntoonNdl+(toonNdl-vec3f(1.0))*uniforms.toonTextureAdditiveColor.a,\nvec3f(0.0),\nvec3f(1.0)\n)+uniforms.toonTextureAdditiveColor.rgb;\n#endif\ndiffuseBase+=mix(info.diffuse*shadow,toonNdl*info.diffuse,info.isToon);\n#elif defined(IGNORE_DIFFUSE_WHEN_TOON_TEXTURE_DISABLED)\ndiffuseBase+=info.diffuse;\n#else\ndiffuseBase+=(info.diffuse*shadow);\n#endif\n";const f="\n#ifdef EMISSIVEASILLUMINATION\nvar finalDiffuse: vec3f=clamp(diffuseBase*diffuseColor+uniforms.vAmbientColor,vec3f(0.0),vec3f(1.0))*baseColor.rgb;\n#else\n#ifdef LINKEMISSIVEWITHDIFFUSE\nvar finalDiffuse: vec3f=clamp((diffuseBase+emissiveColor)*diffuseColor+uniforms.vAmbientColor,vec3f(0.0),vec3f(1.0))*baseColor.rgb;\n#else\nvar finalDiffuse: vec3f=clamp(diffuseBase*diffuseColor+emissiveColor+uniforms.vAmbientColor,vec3f(0.0),vec3f(1.0))*baseColor.rgb;\n#endif\n#endif\n";return e[`!${(0,i.N)(f)}`]=`\n#ifdef APPLY_AMBIENT_COLOR_TO_DIFFUSE\n#ifdef EMISSIVEASILLUMINATION\nvar finalDiffuse: vec3f=clamp(diffuseBase*diffuseColor,vec3f(0.0),vec3f(1.0))*baseColor.rgb;\n#else\n#ifdef LINKEMISSIVEWITHDIFFUSE\nvar finalDiffuse: vec3f=clamp((diffuseBase+emissiveColor)*diffuseColor,vec3f(0.0),vec3f(1.0))*baseColor.rgb;\n#else\nvar finalDiffuse: vec3f=clamp(diffuseBase*diffuseColor+emissiveColor,vec3f(0.0),vec3f(1.0))*baseColor.rgb;\n#endif\n#endif\n#else\n${f.replace("diffuseBase","(diffuseBase)")}#endif\n`,e.CUSTOM_FRAGMENT_BEFORE_FOG="\n#if defined(NORMAL) && defined(SPHERE_TEXTURE)\nvar viewSpaceNormal: vec3f=normalize(mat3x3f(scene.view[0].xyz,scene.view[1].xyz,scene.view[2].xyz)*fragmentInputs.vNormalW);var sphereUV: vec2f=viewSpaceNormal.xy*0.5+0.5;var sphereReflectionColor: vec4f=textureSample(sphereSampler,sphereSamplerSampler,sphereUV);\n#ifdef SPHERE_TEXTURE_COLOR\nsphereReflectionColor=vec4f(\nmix(\nvec3f(1.0),\nsphereReflectionColor.rgb*uniforms.sphereTextureMultiplicativeColor.rgb,\nuniforms.sphereTextureMultiplicativeColor.a\n),\nsphereReflectionColor.a\n);sphereReflectionColor=vec4f(\nclamp(\nsphereReflectionColor.rgb+(sphereReflectionColor.rgb-vec3f(1.0))*uniforms.sphereTextureAdditiveColor.a,\nvec3f(0.0),\nvec3f(1.0)\n)+uniforms.sphereTextureAdditiveColor.rgb,\nsphereReflectionColor.a\n);\n#endif\nsphereReflectionColor=vec4f(sphereReflectionColor.rgb*diffuseBase,sphereReflectionColor.a);\n#ifdef SPHERE_TEXTURE_BLEND_MODE_MULTIPLY\ncolor*=sphereReflectionColor;\n#elif defined(SPHERE_TEXTURE_BLEND_MODE_ADD)\ncolor=vec4f(color.rgb+sphereReflectionColor.rgb,color.a);\n#endif\n#endif\n",e}return null}}},9159:(e,f,n)=>{function o(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}n.d(f,{N:()=>o})}}]);
//# sourceMappingURL=723.87a8ec93.chunk.js.map