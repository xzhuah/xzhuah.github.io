{"version":3,"file":"static/js/754.3fce0a2e.chunk.js","mappings":"oPAUA,MAAMA,EAA0BC,IAImD,IAJlD,UACEC,EAAS,SACTC,KACGC,GACuCH,EAE3E,MAAOI,EAAaC,GAAkBC,EAAAA,SAG5B,MAEJC,GAAoBC,EAAAA,EAAAA,cAAaC,IACrCA,EAAMC,iBACND,EAAME,kBACNN,EACoB,OAAhBD,EACM,CACAQ,OAAQH,EAAMI,QAAU,EACxBC,OAAQL,EAAMM,QAAU,GAK1B,KACP,GACA,IAEGC,GAA6BR,EAAAA,EAAAA,cAAaC,IAC9CA,EAAMC,iBACND,EAAME,kBAENN,EACoB,OAAhBD,EACM,CACAQ,OAAQH,EAAMI,QAAUI,OAAOC,OAAOC,MAAQ,EAAIV,EAAMI,QAAU,IAAMJ,EAAMI,QAAU,IACxFC,OAAQL,EAAMM,QAAU,GAK1B,KACP,GACA,IAEGK,GAAiBC,EAAAA,EAAAA,IAAaL,EAA4B,CAC9DM,UAAW,MAIPC,EAAcA,KAClBlB,EAAe,KAAK,EAEtB,OAAyB,IAArBJ,EAAUuB,QACLC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,IAAKvB,EAAID,SACnBA,KAKEyB,EAAAA,EAAAA,MAACD,EAAAA,EAAK,CAACE,cAAerB,KAAwBa,OAAsBjB,EAAID,SAAA,CAC5EA,GACDuB,EAAAA,EAAAA,KAACI,EAAAA,EAAI,CACDC,KAAsB,OAAhB1B,EACN2B,QAASR,EACTS,gBAAgB,iBAChBC,eACkB,OAAhB7B,EACM,CAAC8B,IAAK9B,EAAYU,OAAQqB,KAAM/B,EAAYQ,aAC5CwB,EACPlC,UAEHuB,EAAAA,EAAAA,KAACY,EAAAA,EAAa,CAACC,KAAMrC,EAAWsC,WAAYA,CAACC,EAA0BC,IAEnD,MAAdD,EAAKE,MACAjB,EAAAA,EAAAA,KAAA,KAAGkB,KAAMH,EAAKI,MAAMD,KACjBE,MAAOL,EAAKI,MAAMC,MAClBC,OAAQN,EAAKI,MAAME,OACnBC,SAAUP,EAAKI,MAAMG,SACrBC,IAAKR,EAAKI,MAAMI,IAChBC,QAAUC,IACR3B,IACA2B,EAAEvC,iBAAiB,EAErBiB,cAAgBsB,IAEdA,EAAEvC,iBAAiB,EACnBT,UAACuB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAQ,CACCC,GAAI,CAACC,QAAS,EAAGC,OAAQ,GAAGpD,SACjDsC,EAAKI,MAAM1C,UAFeuC,MAIvBhB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAQ,CAAaF,QAAUC,IACrC3B,GAAa,EAEf6B,GAAI,CAACC,QAAS,EAAGC,OAAQ,GAAGpD,SAC1BsC,GAJoBC,SAOpB,EAIJc,EAA8BC,IAImD,IAJlD,UACEvD,EAAS,SACTC,KACGC,GACuCqD,EAE/E,MAAOpD,EAAaC,GAAkBC,EAAAA,SAG5B,MAEJC,GAAoBC,EAAAA,EAAAA,cAAaC,IACrCA,EAAMC,iBACND,EAAME,kBACNN,EACoB,OAAhBD,EACM,CACAQ,OAAQH,EAAMI,QAAU,EACxBC,OAAQL,EAAMM,QAAU,GAK1B,KACP,GACA,IAEGQ,EAAcA,KAClBlB,EAAe,KAAK,EAEtB,OAAyB,IAArBJ,EAAUuB,QACLC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,IAAKvB,EAAID,SACnBA,KAGEyB,EAAAA,EAAAA,MAACD,EAAAA,EAAK,CAACE,cAAerB,KAAuBJ,EAAID,SAAA,CACrDA,GACDuB,EAAAA,EAAAA,KAACI,EAAAA,EAAI,CACDC,KAAsB,OAAhB1B,EACN2B,QAASR,EACTS,gBAAgB,iBAChBC,eACkB,OAAhB7B,EACM,CAAC8B,IAAK9B,EAAYU,OAAQqB,KAAM/B,EAAYQ,aAC5CwB,EACPlC,UAEHuB,EAAAA,EAAAA,KAACY,EAAAA,EAAa,CAACC,KAAMrC,EAAWsC,WAAYA,CAACC,EAA0BC,IAEnD,MAAdD,EAAKE,MACAjB,EAAAA,EAAAA,KAAA,KAAGkB,KAAMH,EAAKI,MAAMD,KACjBE,MAAOL,EAAKI,MAAMC,MAClBC,OAAQN,EAAKI,MAAME,OACnBC,SAAUP,EAAKI,MAAMG,SACrBC,IAAKR,EAAKI,MAAMI,IAChBC,QAAUC,IACR3B,IACA2B,EAAEvC,iBAAiB,EAErBiB,cAAgBsB,IAEdA,EAAEvC,iBAAiB,EACnBT,UAACuB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAQ,CAAAjD,SACpBsC,EAAKI,MAAM1C,UADeuC,MAGvBhB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAQ,CACCC,GAAI,CAACC,QAAS,EAAGC,OAAQ,GACzBL,QAAUC,IACzB3B,GAAa,EACbrB,SAAEsC,GAJkBC,SAOpB,EAgBV,EAboBgB,IAK0B,IALzB,UACExD,EAAS,gBACTyD,EAAkBC,EAAAA,GAAQ,SAC1BzD,KACGC,GACcsD,EACtC,OAAIC,GACKjC,EAAAA,EAAAA,KAAC1B,EAAuB,CAACE,UAAWA,EAAWC,SAAUA,KAAcC,KAEvEsB,EAAAA,EAAAA,KAAC8B,EAA2B,CAACtD,UAAWA,EAAWC,SAAUA,KAAcC,GACpF,E,2HC/KK,MAAMyD,EAAW5D,IAKsB,IALrB,YACE6D,EAAoB,SACpBC,GAAW,EAAK,SAChBC,GAAW,KACR5D,GACUH,EACtC,GAAI8D,EACF,OAAOrC,EAAAA,EAAAA,KAACuC,EAAAA,EAAU,IAAK7D,IAEzB,IAAK0D,EACH,OAAOpC,EAAAA,EAAAA,KAACwC,EAAAA,EAAY,IAAK9D,IAE3B,MAAMuC,EAAOmB,EAAYK,SAAS,KAAOL,EAAYM,MAAM,KAAK,GAAKN,EAC/DO,EAAUP,EAAYK,SAAS,KAAOL,EAAYM,MAAM,KAAK,GAAK,GACxE,OAAQzB,GACN,IAAK,QACH,OAAOjB,EAAAA,EAAAA,KAAC4C,EAAAA,EAAe,IAAKlE,IAC9B,IAAK,OACH,OAAQiE,GACN,IAAK,MACH,OAAO3C,EAAAA,EAAAA,KAAC6C,EAAAA,EAAO,IAAKnE,IACtB,IAAK,aACH,OAAOsB,EAAAA,EAAAA,KAAC8C,EAAAA,EAAc,IAAKpE,IAC7B,IAAK,OACH,OAAOsB,EAAAA,EAAAA,KAAC+C,EAAAA,EAAQ,IAAKrE,IACvB,QACE,OAAOsB,EAAAA,EAAAA,KAACgD,EAAAA,EAAe,IAAKtE,IAElC,IAAK,QACH,OAAOsB,EAAAA,EAAAA,KAACiD,EAAAA,EAAa,IAAKvE,IAC5B,IAAK,QACH,OAAOsB,EAAAA,EAAAA,KAACkD,EAAAA,EAAa,IAAKxE,IAC5B,IAAK,OACH,OAAOsB,EAAAA,EAAAA,KAACmD,EAAAA,EAAgB,IAAKzE,IAC/B,QACE,OAAOsB,EAAAA,EAAAA,KAACoD,EAAAA,EAAmB,IAAK1E,IACpC,E,gEC/CK,MAAM2E,EAAe9E,IAAgD,IAAD+E,EAAA,IAA9C,SAACC,EAAQ,WAAEC,GAA8BjF,EACpE,OAAOyB,EAAAA,EAAAA,KAACyD,EAAAA,EAAI,CACRpC,OAAQkC,EAASlB,cAAW,EAASqB,EAAAA,EACrCvD,cAAgBsB,IACT8B,EAASlB,UACZZ,EAAEvC,iBACJ,EAEFgC,KAAMqC,EAASI,MAA4B,QAAzBL,EAAIC,EAASK,oBAAY,IAAAN,OAAA,EAArBA,EAAuBK,WAAO,EACpDE,UAAW,IACXrC,QAAUC,IACJ8B,EAASlB,WACXZ,EAAEvC,kBACQ,OAAVsE,QAAU,IAAVA,GAAAA,EAAaD,GACf,EACA9E,SACJ8E,EAASO,MAAY,ECNZC,EAAcxF,IAM0B,IAAD+E,EAAAU,EAAAC,EAAAC,EAAA,IANxB,SACEX,EAAQ,SACRY,EAAQ,UACR3F,EAAS,WACTgF,KACG9E,GACcH,EAC7C,MAAM8D,EAAWkB,EAASlB,SACpBC,EAAWiB,EAASjB,SAC1B,OAAOpC,EAAAA,EAAAA,MAACkE,EAAW,CAACC,UAAW,MAAOC,QAAS,EAAGC,WAAY,SAAUC,UAAW,QAC/DhG,UAAoB,OAATA,QAAS,IAATA,EAAAA,EAAa,GACxByD,gBAAiBC,EAAAA,GACjBP,GAAI,CACF8C,gBAAiBN,EAAW,wBAA0B,cACtDO,SAAU,IACVC,SAAU,EACV,UAAW,CACTF,gBAAiBN,EAAW,wBAA0B,0BAGtDzF,EAAID,SAAA,EAC1BuB,EAAAA,EAAAA,KAAC4E,EAAAA,EAAmB,CAACC,GAAI,KAAKpG,UAC5ByB,EAAAA,EAAAA,MAACD,EAAAA,EAAK,CAACoE,UAAW,MAAOC,QAAS,EAAGC,WAAY,SAAUO,UAAW,UAAWC,SAAU,EAAEtG,SAAA,EAC3FuB,EAAAA,EAAAA,KAACmC,EAAQ,CAACE,SAAUA,EAAUD,YAAkC,QAAvBkB,EAAEC,EAASK,oBAAY,IAAAN,OAAA,EAArBA,EAAuBlB,YACxDE,SAAUA,EAAU0C,MAAOb,EAAW,UAAY,aAC5DnE,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CAACC,QAAS,QAASC,iBAAiB,EACnCJ,SAAU,EAAEtG,UACtBuB,EAAAA,EAAAA,KAACqD,EAAY,CAACE,SAAUA,EAAUC,WAAYA,OAEhDxD,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CAACC,QAAS,QAASC,iBAAiB,EACnCC,UAAW,QAAQ3G,UAAE4G,EAAAA,EAAAA,IAAY9B,MAC7CvD,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CAACC,QAAS,QACTC,iBAAiB,EACjBC,UAAW,QAAQ3G,UAAE6G,EAAAA,EAAAA,IAAc/B,EAASgC,qBACxDvF,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CAACC,QAAS,QACTC,iBAAiB,EACjBC,UAAW,QAAQ3G,UAAE+G,EAAAA,EAAAA,IAAyC,QAAtBxB,EAACT,EAASK,oBAAY,IAAAI,OAAA,EAArBA,EAAuByB,gBAC5EzF,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CAACC,QAAS,QACTC,iBAAiB,EACjBC,UAAW,QAAQ3G,UAAEiH,EAAAA,EAAAA,IAAanC,EAASjB,kBAG3DtC,EAAAA,EAAAA,KAAC4E,EAAAA,EAAmB,CAACe,KAAM,KAAKlH,UAC9ByB,EAAAA,EAAAA,MAACD,EAAAA,EAAK,CAACoE,UAAW,MAAOC,QAAS,EAAGC,WAAY,SAAUO,UAAW,UAAWC,SAAU,EAAEtG,SAAA,EAC3FuB,EAAAA,EAAAA,KAACmC,EAAQ,CAACE,SAAUA,EAAUD,YAAkC,QAAvB6B,EAAEV,EAASK,oBAAY,IAAAK,OAAA,EAArBA,EAAuB7B,YACxDE,SAAUA,EAAUsD,SAAU,QAASZ,MAAOb,EAAW,UAAY,aAC/EjE,EAAAA,EAAAA,MAACD,EAAAA,EAAK,CAACoE,UAAW,SAAUC,QAAS,EAAGS,SAAU,EAAEtG,SAAA,EAClDyB,EAAAA,EAAAA,MAAC+E,EAAAA,GAAU,CAACC,QAAS,QAASC,iBAAiB,EACnCJ,SAAU,EAAEtG,SAAA,CAAC,KAACuB,EAAAA,EAAAA,KAACqD,EAAY,CAACE,SAAUA,EACVC,WAAYA,QACpDtD,EAAAA,EAAAA,MAACD,EAAAA,EAAK,CAACoE,UAAW,MAAOC,QAAS,EAAGC,WAAY,SAAS9F,SAAA,EACxDuB,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CAACC,QAAS,UACTC,iBAAiB,EAAM1G,UAAE6G,EAAAA,EAAAA,IAAc/B,EAASgC,qBAC5DvF,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CAACC,QAAS,UACTC,iBAAiB,EAAM1G,UAAE+G,EAAAA,EAAAA,IAAyC,QAAtBtB,EAACX,EAASK,oBAAY,IAAAM,OAAA,EAArBA,EAAuBuB,gBAChFzF,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CAACC,QAAS,UACTC,iBAAiB,EAAM1G,UAAEiH,EAAAA,EAAAA,IAAanC,EAASjB,uBAKjE9D,GAAaA,EAAUuB,OAAS,GAAKmC,EAAAA,KACnClC,EAAAA,EAAAA,KAAC6F,EAAAA,EAAU,CAACC,MAAK9F,EAAAA,EAAAA,KAAC+F,EAAAA,EAAY,IAAGpE,GAAI,CAACqE,aAAc,SAAUC,UAAW,QAC7D/G,iBAAiB,EACjBV,UAAWA,MAEf,E,4CCjET,MAAM0H,EAAgB3H,IAO4B,IAAD+E,EAAAU,EAAAC,EAAA,IAP1B,SACEV,EAAQ,SACRY,EAAQ,UACR3F,EAAS,SACT2H,EAAW,EAAC,WACZ3C,KACG9E,GACgBH,EACjD,MAAM8D,EAAWkB,EAASlB,SACpBC,EAAWiB,EAASjB,SAC1B,OAAOtC,EAAAA,EAAAA,KAACoE,EAAW,CAACC,UAAW,SAAUC,QAAS,EAAGC,WAAY,SAAUC,UAAW,SAClE4B,WAAY,EACZnE,gBAAiBC,EAAAA,GACjB1D,UAAoB,OAATA,QAAS,IAATA,EAAAA,EAAa,GACxBmD,GAAI,CACF8C,gBAAiBN,EAAW,wBAA0B,cACtDO,SAAU,EACVC,SAAU,IACVqB,aAAc,EACd,UAAW,CACTvB,gBAAiBN,EAAW,wBAA0B,uBAG1DkC,MAAO,IAAGf,EAAAA,EAAAA,IAAc/B,EAASgC,uBAAsBC,EAAAA,EAAAA,IAAyC,QAAtBlC,EAACC,EAASK,oBAAY,IAAAN,OAAA,EAArBA,EAAuBmC,kBAAiBC,EAAAA,EAAAA,IAAanC,EAASjB,eACrI5D,EAAID,UAC1ByB,EAAAA,EAAAA,MAACoG,EAAAA,EAAG,CAAA7H,SAAA,EACFuB,EAAAA,EAAAA,KAACuG,EAAAA,EAAK,CAAC5E,GAAI,CACT,oBAAqB,CAAC6E,OAAmB,EAAXL,EAAcM,SAAqB,EAAXN,IAEjDO,aACGxE,EAAAA,IAAY1D,GAAaA,EAAUuB,OAAS,GACzCC,EAAAA,EAAAA,KAAC6F,EAAAA,EAAU,CAACC,MAAM9F,EAAAA,EAAAA,KAAC+F,EAAAA,EAAY,CAACf,MAAO,YAAciB,UAAW,QACpD/G,iBAAiB,EACjBV,UAAWA,SAAe,EAG5CmI,QAAQ,WACRC,aAAc,CACZC,SAAU,MACVC,WAAY,SACZrI,UACPuB,EAAAA,EAAAA,KAACuG,EAAAA,EAAK,CAAC5E,GAAI,CACT,oBAAqB,CAAC6E,OAAmB,EAAXL,EAAcM,SAAqB,EAAXN,IAEjDO,aAAcpE,GAAWtC,EAAAA,EAAAA,KAAC+G,EAAAA,EAAQ,CAACpF,GAAI,CACrCiE,SAAaO,EAAW,EAAd,UACLnG,EAAAA,EAAAA,KAACgH,EAAAA,EAAQ,CAACrF,GAAI,CACnBiE,SAAaO,EAAW,EAAd,SAEZnB,MAAO1C,EAAW,UAAY,UAC9BqE,QAAQ,WAERC,aAAc,CACZC,SAAU,SACVC,WAAY,SACZrI,UACPuB,EAAAA,EAAAA,KAACmC,EAAQ,CAACE,SAAUA,EAAUD,YAAkC,QAAvB4B,EAAET,EAASK,oBAAY,IAAAI,OAAA,EAArBA,EAAuB5B,YACxDE,SAAUA,EAAU0C,MAAOb,EAAW,UAAY,UAAWxC,GAAI,CACzEiE,SAAU,GAAGO,eAInBnG,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CAACC,QAAS,QAASC,iBAAiB,EAAOJ,SAAU,EAAEtG,UAChEuB,EAAAA,EAAAA,KAACqD,EAAY,CAACE,SAAUA,EAAUC,WAAYA,OAChDxD,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CAACC,QAAS,UACTC,iBAAiB,EAAM1G,UAAE+G,EAAAA,EAAAA,IAAyC,QAAtBvB,EAACV,EAASK,oBAAY,IAAAK,OAAA,EAArBA,EAAuBwB,mBAEtE,E,0HC/ET,MAAMwB,EAAmB1I,IAK+B,IAL9B,SACE2I,EAAQ,MACRb,EAAQ,OAAM,OACdhF,EAAS,YACN3C,GACmBH,EACvD,OAAOyB,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CACjBrB,MAAM9F,EAAAA,EAAAA,KAACoH,EAAAA,EAAa,IACpB5F,QAASA,KACXhC,OAAOa,MAAKgH,EAAAA,EAAAA,IAAeH,GAAW7F,EAAO,EAEzBgF,MAAOA,KAAW3H,GACtC,E,0BCTG,MAAM4I,GAAc/I,IAK0B,IALzB,OACEgJ,EAAM,SACNjF,EAAQ,mBACRkF,KACG9I,GACcH,EAC7C,MAAM,UAACkJ,GAAa5I,EAAAA,WAAiB6I,EAAAA,GACrC,OAAO1H,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CACjBrB,KAAMxD,GAAWtC,EAAAA,EAAAA,KAACgH,EAAAA,EAAQ,KAAKhH,EAAAA,EAAAA,KAAC2H,GAAAA,EAAS,IACzCnG,QAASA,MACPoG,EAAAA,GAAAA,IAAcL,GAASjF,GACtBuF,MAAK,KACJL,GAAoB,IAErBM,OAAOrG,IACFgG,EAAU,qBAAuBhG,EAAEsG,QAAQ,GAEhD,EAEH1B,MAAO/D,EAAW,UAAY,WAAa5D,GAC7C,ECrBSsJ,GAAezJ,IAM2B,IAN1B,OACEgJ,EAAM,SACNU,EAAQ,MACR5B,EAAQ,SAAQ,MAChBrB,EAAQ,WACLtG,GACeH,EAC/C,MAAM,UAACkJ,GAAa5I,EAAAA,WAAiB6I,EAAAA,GACrC,OAAO1H,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CACjBrB,MAAM9F,EAAAA,EAAAA,KAACkI,EAAAA,EAAU,CAAClD,MAAOA,IACzBA,MAAOA,EACPxD,QAASA,MACP2G,EAAAA,GAAAA,IAAWZ,GACVM,MAAK,KACJI,GAAU,IAEXH,OAAOrG,IACFgG,EAAU,qBAAuBhG,EAAEsG,QAAQ,GAEhD,EAEH1B,MAAOA,KAAW3H,GACpB,E,0BCtBG,MAAM0J,GAAmB7J,IAM+B,IAN9B,OACEgJ,EAAM,aACNc,EAAY,SACZC,EAAQ,MACRjC,EAAQ,YACL3H,GACmBH,EACvD,OAAOyB,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CACjBrB,MAAM9F,EAAAA,EAAAA,KAACuI,GAAAA,EAA0B,IACjC/G,QAASgH,iBACcC,EAAAA,GAAAA,IAAsBC,GAAAA,GAAYC,uBAAwB,CAC7EC,SAAUP,EACVd,OAAQA,KAECsB,SACTP,GACF,EAEFjC,MAAOA,KACH3H,GACS,E,eClBZ,MAAMoK,GAAoBvK,IAKgC,IAL/B,cACEwK,EAAa,2BACbC,EAA0B,eAC1BC,KACGvK,GACoBH,EACzD,OAAOyB,EAAAA,EAAAA,KAAC6F,EAAAA,EAAU,CACdQ,MAAO2C,EAA2BD,GAAe1C,MACjD7H,UAAW0K,OAAOC,KAAKH,GAA4BI,KAAKC,IACtD,MAAM,QAAC7H,KAAY8H,GAASN,EAA2BK,GACvD,OAAOrJ,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CACCxF,GAAM4H,EAAAA,EACN/H,QAAUC,IACJD,GACFA,EAAQC,GAEVwH,EAAeI,EAAO,KAEpBC,GARCD,EAQO,OAEhC3K,GAAQ,E,wBCxBlB,MAAMsK,GAA6B,CACjCQ,MAAO,CACLnD,MAAO,OACPP,MAAM9F,EAAAA,EAAAA,KAACyJ,GAAAA,EAAY,KAErBC,KAAM,CACJrD,MAAO,OACPP,MAAM9F,EAAAA,EAAAA,KAAC2J,GAAAA,EAAY,MASVC,GAAqBrL,IAIiC,IAJhC,cACEsL,EAAa,eACbC,KACGpL,GACqBH,EAC3D,OAAOyB,EAAAA,EAAAA,KAAC8I,GAAiB,CACrBC,cAAec,EACfb,2BAA4BA,GAC5BC,eAAiBI,IACfS,EAAeT,EAAuB,EAExCvD,KAAMkD,GAA2Ba,GAAe/D,QAC5CpH,GACa,E,2FCzBvB,MAAMqL,GAA4B,CAChCjG,KAAM,CACJuC,MAAO,OACPP,MAAM9F,EAAAA,EAAAA,KAACgK,GAAAA,EAAmB,KAE5B/I,KAAM,CACJoF,MAAO,OACPP,MAAM9F,EAAAA,EAAAA,KAACiK,GAAAA,EAAY,KAErBC,KAAM,CACJ7D,MAAO,gBACPP,MAAM9F,EAAAA,EAAAA,KAACmK,GAAAA,EAAc,KAEvBC,KAAM,CACJ/D,MAAO,OACPP,MAAM9F,EAAAA,EAAAA,KAACqK,GAAAA,EAAY,KAErBC,WAAY,CACVjE,MAAO,aACPP,MAAM9F,EAAAA,EAAAA,KAACuK,GAAAA,EAAc,MASZC,GAAejM,IAI2B,IAJ1B,cACEkM,EAAa,eACbC,KACGhM,GACeH,EAC/C,OAAOyB,EAAAA,EAAAA,KAAC8I,GAAiB,CACrBC,cAAe0B,EACfzB,2BAA4Be,GAC5Bd,eAAiBI,IACfqB,EAAerB,EAAuB,EAExCvD,KAAMiE,GAA0BU,GAAe3E,QAC3CpH,GACa,EAGViM,GAAiBA,CAACC,EAAsBC,EAAsBC,EAAsBC,KAAsB,IAADC,EAAAC,EAAAC,EAAAC,EACpH,IAAIC,EAAS,EAGb,GAAIR,EAAEvI,WAAawI,EAAExI,SAEnB,OADA+I,EAAS,EACFL,GAAWK,EAASA,EACtB,IAAKR,EAAEvI,UAAYwI,EAAExI,SAE1B,OADA+I,GAAU,EACHL,GAAWK,EAASA,EAG7B,OAAQN,GACN,IAAK,OACHM,IAAwB,QAAdJ,EAAAJ,EAAEhH,oBAAY,IAAAoH,OAAA,EAAdA,EAAgBvF,cAAe,KAAoB,QAAdwF,EAAAJ,EAAEjH,oBAAY,IAAAqH,OAAA,EAAdA,EAAgBxF,cAAe,GAC9E,MACF,IAAK,OACH2F,EAASR,EAAErF,iBAAmBsF,EAAEtF,iBAChC,MACF,IAAK,OACH6F,IAAwB,QAAdF,EAAAN,EAAEhH,oBAAY,IAAAsH,OAAA,EAAdA,EAAgB9I,cAAe,IAAIiJ,eAA4B,QAAdF,EAAAN,EAAEjH,oBAAY,IAAAuH,OAAA,EAAdA,EAAgB/I,cAAe,IAC1F,MACF,IAAK,aACHgJ,EAASR,EAAEtI,SAAW,GAAK,GAAKuI,EAAEvI,SAAW,GAAK,GAClD,MAEF,QACE8I,EAASR,EAAE9G,KAAKuH,cAAcR,EAAE/G,MASpC,OALe,IAAXsH,IAEFA,EAASR,EAAEU,GAAGD,cAAcR,EAAES,KAGzBP,GAAWK,EAASA,CAAM,E,kHCpFnC,MAeA,GAf2B7M,IAIwC,IAJvC,OACSgN,EAAM,MACNlF,EAAQ,eACL3H,GACqBH,EAC3D,OAAOyB,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CACjBrB,MAAM9F,EAAAA,EAAAA,KAACwL,GAAAA,EAAe,IACtBhK,QAASA,KACPiK,KAAKjM,OAAOkM,SAASC,MAAOtE,EAAAA,EAAAA,IAAekE,GAAQ,EAErDlF,MAAOA,KACH3H,GACS,EC0BbkN,GAAerN,IAE2B,OADrBG,GACeH,EAExC,MAAOsN,EAAcC,IAAmBC,EAAAA,EAAAA,OACjCC,EAAQC,GAAapN,EAAAA,UAAe,GACrCqN,EAAgBL,EAAaM,IAAI,OAChCC,EAAaC,GAAkBxN,EAAAA,SAAkCyN,EAAAA,GAAkBC,WACnFlK,EAAUmK,GAAe3N,EAAAA,UAAe,IACxC4N,EAAaC,GAAkB7N,EAAAA,SAAoC,KACnE8N,EAAcC,GAAmB/N,EAAAA,SAAoC,KACrEgO,EAAeC,GAAoBjO,EAAAA,UAAwB,IAC3D4L,EAAesC,GAAoBlO,EAAAA,SAA6B,SAIhEmO,EAASC,GAAcpO,EAAAA,SAAuB,MAG9CqO,EAAMC,GAAWtO,EAAAA,SAAyB,KAC1CuO,EAAOC,GAAYxO,EAAAA,cAA4C,GAChEyO,GAAUC,EAAAA,GAAAA,IAAsB,OAALH,QAAK,IAALA,OAAK,EAALA,EAAO9B,KAElC,UAAC7D,GAAa5I,EAAAA,WAAiB6I,EAAAA,IAC/B,EAAC8F,IAAKC,EAAAA,GAAAA,OACL5D,EAAe6D,IAAoB7O,EAAAA,SAA6B,UAChE8O,GAAgBC,IAAqB/O,EAAAA,UAAe,IACpDgP,GAAeC,IAAoBjP,EAAAA,UAAe,GACnDkP,IAAaC,EAAAA,EAAAA,QAAgB,MAC7BC,GAActB,EAAa5M,OAAS,GAE1CmO,EAAAA,EAAAA,YAAU,MAERC,EAAAA,GAAAA,IAAQjC,GAAerE,MAAMuG,IAAc,IAADC,EACxChC,EAAe+B,GACfxB,EAAgB,IACE,QAAlByB,EAAAN,GAAWO,eAAO,IAAAD,GAAlBA,EAAoBE,mBAAmB,IACnCH,EAAS/L,SACW,KAAlB+L,EAAStK,KACXmJ,EAAWmB,EAASlB,KAAOkB,EAAStK,KAAO,KAE3CmJ,EAAW,KAGbA,EAAWmB,EAASlB,KAAOkB,EAAStK,MAEtCuJ,EAASe,EAAShB,OAClBZ,EAAY4B,EAAS/L,UACjB+L,EAAS/L,SACXqK,EAAe0B,EAAS3P,SAAS+P,MAAK,CAAC5D,EAAGC,IACjCF,GAAeC,EAAGC,EAAGJ,EAAeoC,MAG7CH,EAAe,CAAC0B,GAClB,IACCtG,OAAO2G,IACRhH,EAAUgH,EAAM1G,QAAS,QAAQ,GACjC,GACD,CAACmE,EAAeF,KAEnBkC,EAAAA,EAAAA,YAAU,KACR,GAAgB,MAAZlB,EACFG,EAAQ,QACH,CACL,MAAMuB,EAAU1B,EAAQ2B,SAAS,KAAO3B,EAAQ4B,MAAM,EAAG5B,EAAQjN,OAAS,GAAKiN,EAC/E,GAAgB,MAAZ0B,EAEF,YADAvB,EAAQ,IAGV,MAAM0B,EAAYH,EAAQE,MAAM,EAAGF,EAAQI,YAAY,MACvD,GAAkB,KAAdD,EAEF,YADA1B,EAAQ,IAGRA,EAAQ0B,EAAUnM,MAAM,KAE5B,IACC,CAACsK,KAEJkB,EAAAA,EAAAA,YAAU,KACRxB,GAAgBqC,GACP,IAAIA,GAAUP,MAAK,CAAC5D,EAAGC,IACrBF,GAAeC,EAAGC,EAAGJ,EAAeoC,MAE7C,GACD,CAACpC,EAAeoC,IAEnB,MAAMmC,GAAoC,GACtC5C,EAAY/J,UAAYiL,IAC1B0B,GAAYC,MACRjP,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CACV+H,UAAW7M,EAEX8M,aAAcA,KACZvB,IAAkB,EAAK,EAEzBwB,aAAcA,KACZxB,IAAkB,EAAM,EAG1B9H,MAAM9F,EAAAA,EAAAA,KAACqP,GAAAA,EAAmB,IAAIhJ,MAAO,aAAc7E,QAAUC,IAC/DA,EAAEvC,mBACFoQ,EAAAA,GAAAA,IAAM3C,IACNlE,EAAAA,GAAAA,IAA+DC,GAAAA,GAAY6G,gBAAiB,CAC1FC,SAAUxC,EACVyC,OAAQrD,EAAY9J,WAErBuF,MAAM6H,IACDA,EAAc7O,QAChByO,EAAAA,GAAAA,IAAMI,EAAc7O,MACpB6L,GAAeqC,GAAY,IAAIA,EAAUW,EAAc7O,QACzD,IACCiH,OAAO2G,IACRhH,EAAUgH,EAAM1G,QAAS,QAAQ,GACjC,KAEJ/H,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CACV+H,UAAW7M,EACXyD,MAAM9F,EAAAA,EAAAA,KAAC2P,GAAAA,EAAW,IAAItJ,MAAO,gBAAiB7E,QAASA,MACzDiH,EAAAA,GAAAA,IAAiEC,GAAAA,GAAYkH,kBAAmB,CAC9FJ,SAAUxC,EACVyC,OAAQrD,EAAY9J,WAErBuF,MAAMgI,IACDA,EAAYhP,MACd6L,GAAeqC,GAAY,IAAIA,EAAWc,EAAYhP,OACxD,IACCiH,OAAO2G,IACRhH,EAAUgH,EAAM1G,QAAS,QAAQ,GACjC,KAEJ/H,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CACV+H,UAAW7M,EACXyD,MAAM9F,EAAAA,EAAAA,KAAC8P,GAAAA,EAAc,IAAIzJ,MAAO,SAAU7E,QAASA,MACrDiH,EAAAA,GAAAA,IAAqDC,GAAAA,GAAYqH,mBAAoB,CACnF7C,KAAMF,EACNyC,OAAQrD,EAAY9J,WAErBuF,MAAK,KACJoE,GAAWD,EAAO,IACjBlE,OAAO2G,IACRhH,EAAUgH,EAAM1G,QAAS,QAAQ,GACjC,KAGJ4E,EAAa5M,QAAU,IACzBiP,GAAYC,MAAKjP,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CAC3BrB,MAAM9F,EAAAA,EAAAA,KAACgQ,EAAAA,EAAiB,IAAI3J,MAAO,OACnC8I,aAAcA,KACZvB,IAAkB,EAAK,EAEzBwB,aAAcA,KACZxB,IAAkB,EAAM,EAE1BpM,QAASA,MACPiH,EAAAA,GAAAA,IAAuDC,GAAAA,GAAYuH,qBAAsB,CACvF1I,OAAQoF,EAAavD,KAAK8G,GAAUA,EAAM5E,KAC1C6E,YAAanD,IACZnF,MAAMuD,IACHA,GACFa,GAAWD,EACb,GACA,KAGRgD,GAAYC,MAAKjP,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CAC3BnC,MAAO,QACPc,MAAM9F,EAAAA,EAAAA,KAACkI,EAAAA,EAAU,IAAI7B,MAAO,SAC5B8I,aAAcA,KACZvB,IAAkB,EAAK,EAEzBwB,aAAcA,KACZxB,IAAkB,EAAM,EAE1BpM,QAASA,MACP2G,EAAAA,GAAAA,IAAWwE,EAAavD,KAAK8G,GAAUA,EAAM5E,MAAKzD,MACjD,KACCoE,GAAWD,EAAO,IACjBlE,OAAO2G,IACRhH,EAAUgH,EAAM1G,QAAS,QAAQ,GACjC,OAOZ,MAAMvE,GAAczC,IACdA,EAAKsB,SACPyJ,EAAgB,CAACR,GAAIvK,EAAKuK,KAE1B9L,OAAOa,MAAK+P,EAAAA,EAAAA,IAAQrP,GAAO2C,EAAAA,EAC7B,EAGI2M,GAAeA,CAAC5O,EAAiD8B,KAAiC,IAAD+M,EAErG,IAAIC,EACJ,GAFA9O,EAAEvC,kBAEG2O,GA6CH,GAAIpM,EAAE+O,SACJ,GAA4B,IAAxB7D,EAAa5M,OACfwQ,EAAuB,CAAChN,OACnB,CACL,MAAMkN,EAAkB,GACxB,IAAIC,GAAU,EACd,IAAK,IAAIC,EAAI,EAAGA,EAAIlE,EAAY1M,OAAQ4Q,IAAK,CAC3C,MAAMC,EAAUnE,EAAYkE,GAC5B,IAAIC,IAAYjE,EAAaA,EAAa5M,OAAS,IAAM6Q,IAAYrN,KACnEmN,GAAWA,GACNA,GAAS,CACP/D,EAAalK,SAASmO,IACzBH,EAAgBxB,KAAK2B,GAEvB,KACF,CAEEF,IACG/D,EAAalK,SAASmO,IACzBH,EAAgBxB,KAAK2B,GAG3B,CACAL,EAAuB,IAAI5D,KAAiB8D,EAC9C,MAGEF,EADE5D,EAAalK,SAASc,GACDoJ,EAAakE,QAAQX,GAAUA,IAAU3M,IAEzC,IAAIoJ,EAAcpJ,QAxE7C,GAAI9B,EAAEqP,QAEFP,EADE5D,EAAalK,SAASc,GACDoJ,EAAakE,QAAQX,GAAUA,IAAU3M,IAEzC,IAAIoJ,EAAcpJ,QAEtC,GAAI9B,EAAE+O,SACX,GAA4B,IAAxB7D,EAAa5M,OACfwQ,EAAuB,CAAChN,OACnB,CACL,MAAMkN,EAAkB,GACxB,IAAIC,GAAU,EACd,IAAK,IAAIC,EAAI,EAAGA,EAAIlE,EAAY1M,OAAQ4Q,IAAK,CAC3C,MAAMC,EAAUnE,EAAYkE,GAC5B,IAAIC,IAAYjE,EAAaA,EAAa5M,OAAS,IAAM6Q,IAAYrN,KACnEmN,GAAWA,GACNA,GAAS,CACP/D,EAAalK,SAASmO,IACzBH,EAAgBxB,KAAK2B,GAEvB,KACF,CAEEF,IACG/D,EAAalK,SAASmO,IACzBH,EAAgBxB,KAAK2B,GAG3B,CACAL,EAAuB,IAAI5D,KAAiB8D,EAC9C,MAEA,GAAI9D,EAAalK,SAASc,GAAW,CAEnCgN,EADiB5D,EAAakE,QAAQX,GAAUA,IAAU3M,GAE5D,MACEgN,EAAuB,CAAChN,GAwCZ,QAAlB+M,EAAAvC,GAAWO,eAAO,IAAAgC,GAAlBA,EAAoB/B,mBAAmBgC,EAAqBnH,KAAK8G,GAAUa,SAASC,eAAed,EAAM5E,OACzGsB,EAAgB2D,EAAqB,EAGjC/R,GAAauC,IACjB,MAAMkQ,EAAiC,GAsDvC,OArDIlQ,EAAKsB,UACP4O,EAAShC,MAAKjP,EAAAA,EAAAA,KAACiH,EAAgB,CAACC,SAAUnG,EAAKuK,GAAIjK,OAAQqC,EAAAA,EAAS/B,GAAI4H,EAAAA,KAc1E0H,EAAShC,MAAKjP,EAAAA,EAAAA,KAACkR,GAAkB,CAAC3F,OAAQxK,EAAKuK,GAAI3J,GAAI4H,EAAAA,KACnD+D,IACF2D,EAAShC,MAAKjP,EAAAA,EAAAA,KAACsH,GAAW,CAACC,OAAQxG,EAAKuK,GAAIhJ,SAAUvB,EAAKuB,SAChCX,GAAI4H,EAAAA,EACJ/B,mBAAoBA,KAClBC,EAAU,UAAW,WACrBwE,GAAWD,EAAO,KAE/CiF,EAAShC,MAAKjP,EAAAA,EAAAA,KAACoI,GAAgB,CAACb,OAAQxG,EAAKuK,GAAIjD,aAActH,EAAK+C,KACpCnC,GAAI4H,EAAAA,EACJjB,SAAUA,KACRb,EAAU,UAAW,WACrBwE,GAAWD,EAAO,KAGpDiF,EAAShC,MAAKjP,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CACxBxF,GAAI4H,EAAAA,EACJzD,MAAM9F,EAAAA,EAAAA,KAACgQ,EAAAA,EAAiB,IAAI3J,MAAO,OACnC7E,QAASA,MACPiH,EAAAA,GAAAA,IAAuDC,GAAAA,GAAYuH,qBAAsB,CACvF1I,OAAQ,CAACxG,EAAKuK,IACd6E,YAAapP,EAAKmM,OACjBrF,MAAMuD,IACHA,GACFa,GAAWD,EACb,GACA,KAGRiF,EAAShC,MAAKjP,EAAAA,EAAAA,KAACgI,GAAY,CAACT,OAAQxG,EAAKuK,GACb3J,GAAI4H,EAAAA,EACJtB,SAAUA,KACRR,EAAU,UAAW,WACrBwE,GAAWD,EAAO,MAK3CiF,CAAQ,EAGXE,GAAoBpQ,IACxB,GAAIA,EAAKsB,SAAU,CACjB,MAAM+O,EAAezE,EAAakE,QAAQX,GACjCA,IAAUnP,IAChBqI,KAAK8G,GAAUA,EAAM5E,MACxB+F,EAAAA,GAAAA,IAASD,EAAcrQ,EAAKmM,KAAOnM,EAAK+C,KAAO,IAAK/C,EAAKuB,UAAUuF,MAAK,KAClE9G,EAAKuB,SACPmF,EAAU,qCAAsC,WAEhDA,EAAU,sCAAuC,WAEnDwE,GAAWD,EAAO,IACjBlE,OAAO2G,IACRhH,EAAUgH,EAAM1G,QAAS,QAAQ,GAGrC,GAGF,OAAO7H,EAAAA,EAAAA,MAACD,EAAAA,EAAK,CAACoE,UAAW,SAAUiN,UAAW,QAChC9P,QAASA,KAC4B,IAAD+P,GAA9B1D,IAAiBI,MACnBrB,EAAgB,IACE,QAAlB2E,EAAAxD,GAAWO,eAAO,IAAAiD,GAAlBA,EAAoBhD,mBAAmB,IACzC,KAEE7P,EAAID,SAAA,EACpByB,EAAAA,EAAAA,MAACsR,EAAAA,EAAW,CAAC7P,GAAI,CAACgD,SAAU,GAAGlG,SAAA,EAC7BuB,EAAAA,EAAAA,KAACyD,EAAAA,EAAI,CAACjC,QACJA,KACEsK,EAAgB,CAAC,EAAE,EAGjB2F,WAAahQ,IACXA,EAAExC,gBAAgB,EAEpByS,OAASjQ,IACP,MAAM2P,EAAezE,EAAavD,KAAK8G,GAAUA,EAAM5E,MACvD+F,EAAAA,GAAAA,IAASD,EAAc,KAAKvJ,MAAK,KAC/BJ,EAAU,qCAAsC,WAChDwE,GAAWD,EAAO,IACjBlE,OAAO2G,IACRhH,EAAUgH,EAAM1G,QAAS,QAAQ,GACjC,EACFtJ,SAEP,UAEGyO,EAAKnN,OAAS,GAAKmN,EAAK9D,KAAI,CAACrI,EAAMC,KAC1BhB,EAAAA,EAAAA,KAACyD,EAAAA,EAAI,CAERjC,QACEA,KACE,MAAMmQ,EAAU,IAAMzE,EAAK0B,MAAM,EAAG5N,GAAO4Q,KAAK,KAAO7Q,GACvD8Q,EAAAA,GAAAA,IAAUF,GAAc,OAALvE,QAAK,IAALA,OAAK,EAALA,EAAO9B,KAAM,IAAIzD,MAAMuG,IACxCtC,EAAgB,CAACR,GAAI8C,GAAU,IAC9BtG,OAAO2G,IACRhH,EAAUgH,EAAM1G,QAAS,QAAQ,GACjC,EAGN0J,WAAahQ,IACXA,EAAExC,gBAAgB,EAEpByS,OAASjQ,IACP,MAAM2P,EAAezE,EAAavD,KAAK8G,GAAUA,EAAM5E,KACjDqG,EAAU,IAAMzE,EAAK0B,MAAM,EAAG5N,GAAO4Q,KAAK,KAAO7Q,EAAO,KAC9DsQ,EAAAA,GAAAA,IAASD,EAAcO,GAAS9J,MAAK,KACnCJ,EAAU,sBAAwBkK,EAAS,WAC3C1F,GAAWD,EAAO,IACjBlE,OAAO2G,IACRhH,EAAUgH,EAAM1G,QAAS,QAAQ,GACjC,EACFtJ,SACJsC,GAxBOC,KA2BdoL,EAAYtI,MAA6B,KAArBsI,EAAYtI,OAAe9D,EAAAA,EAAAA,KAACyD,EAAAA,EAAI,CAAAhF,SAAE2N,EAAYtI,WAErE5D,EAAAA,EAAAA,MAACD,EAAAA,EAAK,CAACoE,UAAW,MAAOyN,eAAgB,QAASC,QAAS,EAAGzN,QAAS,EAAGC,WAAY,SAAS9F,SAAA,EAC7FuB,EAAAA,EAAAA,KAAC4E,EAAAA,EAAmB,CAACC,GAAI,KAAKpG,UAC5BuB,EAAAA,EAAAA,KAACY,EAAAA,EAAa,CAACC,KAAMmO,GAAalO,WAAYA,CAACC,EAAMC,KAC5ChB,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,CACCjC,QAAS,WACTF,MAAO,UACPgN,kBAAkB,KAAWjR,EAAKI,OAH7BH,QAM/BhB,EAAAA,EAAAA,KAAC4E,EAAAA,EAAmB,CAACe,KAAM,KAAKlH,UAC9BuB,EAAAA,EAAAA,KAACiS,GAAAA,EAAS,CAACC,KAAMlD,GAAYjP,OAAS,EAAEtB,UACtCuB,EAAAA,EAAAA,KAAC6F,EAAAA,EAAU,CAACC,MAAK9F,EAAAA,EAAAA,KAACmS,GAAAA,EAAQ,IAAGlM,UAAW,OAAQzH,UAAWwQ,GAC/C9P,iBAAiB,SAGjCc,EAAAA,EAAAA,KAAC4J,GAAkB,CAACC,cAAeA,EACfO,KAAMlI,EAAAA,GAAW,QAAU,QAC3BgD,QAAS,WAAYF,MAAO,UAC5B8E,eAAgB4D,GAChBxO,iBAAiB,KAErCc,EAAAA,EAAAA,KAACwK,GAAY,CAACC,cAAeA,EACfvL,iBAAiB,EACjBkL,KAAMlI,EAAAA,GAAW,QAAU,QAC3BgD,QAAS,WAAYF,MAAO,UAC5Bc,MAAM9F,EAAAA,EAAAA,KAACoS,GAAAA,EAAQ,IACf1H,eAAiB2H,IACftF,EAAiBsF,GACjBvF,GAAkBD,EAAc,IAE/C3K,EAAAA,KAAYlC,EAAAA,EAAAA,KAACsS,EAAAA,GAAgB,CAC1BpC,MAAM,YACNvO,GAAI,CACFgD,UAAW,EACX4N,SAAU,GAEZC,SAASxS,EAAAA,EAAAA,KAACyS,EAAAA,EAAM,CAACzN,MAAM,UAAU0N,QAAS7E,GACzBrM,QAAUC,IACRA,EAAEvC,iBAAiB,EAErByC,GAAI,CACF4Q,QAAS,SAEXI,SAAWlR,IACTqM,IAAkBD,GAAc,IAEnD+E,OAAO5S,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CACd7D,MAAO,CAACyR,aAAc,QAASjN,SAAU,SAASnH,SAAE,WACxDqU,eAAe,QAIlB5Q,EAAAA,IAAY2L,KAAiB7N,EAAAA,EAAAA,KAACsS,EAAAA,GAAgB,CAC3C3Q,GAAI,CACFgD,UAAW,EACX4N,SAAU,GAEZrC,MAAM,YACNsC,SAASxS,EAAAA,EAAAA,KAAC+S,EAAAA,EAAQ,CAAC/N,MAAM,UAAU0N,QAAS/F,EAAa5M,SAAW0M,EAAY1M,OAC7DyB,QAAUC,IACRA,EAAEvC,iBAAiB,EAErByC,GAAI,CACF4Q,QAAS,SAEXI,SAAWlR,IACwC,IAADuR,EAIzCC,EAJP,GAAItG,EAAa5M,SAAW0M,EAAY1M,OAGtC,OAFA6M,EAAgB,SACE,QAAlBoG,EAAAjF,GAAWO,eAAO,IAAA0E,GAAlBA,EAAoBzE,mBAAmB,KAGvC3B,EAAgB,IAAIH,IACF,QAAlBwG,EAAAlF,GAAWO,eAAO,IAAA2E,GAAlBA,EAAoB1E,mBAAmB9B,EAAYrD,KAAK8G,GAAUa,SAASC,eAAed,EAAM5E,MAClG,IAErBsH,OAAO5S,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CACd7D,MAAO,CAACyR,aAAc,QAASjN,SAAU,SAASnH,SAAE,QACxDqU,eAAe,YAKrB9S,EAAAA,EAAAA,KAACkT,GAAAA,GAAO,CACJC,IAAKpF,GAGLqF,UAAWrC,SAASsC,KAEpBC,cAAe9T,OAEf+T,kBAAmB,CAAC,WAEpBC,eAAe,EAEfC,kBAAkB,EAClBC,yBAAyB,EAEzB/F,eAAgBA,GAEhBgG,qBAAsB,CAAC,CAAC,SAAU,CAAC,SAEnCC,aAAcpU,OAAOuR,SAAS8C,cAAc,gBAE5CC,cAAerS,IACLwM,GAIV8F,QAAS,EAETC,SAAUvS,IACR,GAAIoM,GACF,OAGF,MAAM0C,EAA4C,GAClD,IAAK,MAAMlP,KAAUI,EAAE0C,SAAU,CAC/B,MAAMmH,EAAKjK,EAAOiK,GACZ/H,EAAWkJ,EAAYwH,MAAM/D,GAAUA,EAAM5E,KAAOA,IACtD/H,GACFgN,EAAqBtB,KAAK1L,EAE9B,CACAqJ,EAAgB2D,EAAqB,KAG3CrQ,EAAAA,EAAAA,MAACgU,GAAAA,EAAK,CAAClT,MAAyB,UAAlB6I,EAA4B,EAAI,EAAEpL,SAAA,EAC9CuB,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACoE,UAAW,SAAS5F,UACzBuB,EAAAA,EAAAA,KAACY,EAAAA,EAAa,CAACC,KAAM4L,EAAa3L,WAAYA,CAACC,EAAMC,KAC5Cd,EAAAA,EAAAA,MAACD,EAAAA,EAAK,CAACoE,UAAW,SAAS5F,SAAA,EAChCuB,EAAAA,EAAAA,KAAC+D,EAAW,CAACR,SAAUxC,EACVuK,GAAIvK,EAAKuK,GACTnH,SAAUwI,EAAalK,SAAS1B,GAChC+D,UAAW,SACXtB,WAAYA,GACZhC,QAAUC,IACR4O,GAAa5O,EAAGV,EAAK,EAEvBoT,cAAeA,KACb3Q,GAAWzC,EAAK,EAGlBvC,UAAWA,GAAUuC,GACrBqT,UAAWnG,GACXoG,YAAc5S,MAEdgQ,WAAY1Q,EAAKsB,SAAYZ,IAC3BA,EAAExC,gBAAgB,OAChB,EACJyS,OAASjQ,IACPA,EAAEvC,kBACFiS,GAAiBpQ,EAAK,KAGrCf,EAAAA,EAAAA,KAACsU,EAAAA,EAAO,MAzB8BvT,EAAKuK,SA4BjDtL,EAAAA,EAAAA,KAACuU,EAAAA,EAAI,CAACnB,WAAS,EAAC7O,WAAY,SACtB7E,MAAO,cACPoS,eAAgB,QAAQrT,UAC5BuB,EAAAA,EAAAA,KAACY,EAAAA,EAAa,CAACC,KAAM4L,EAAa3L,WAAYA,CAACC,EAAMC,KAC5ChB,EAAAA,EAAAA,KAACkG,EAAa,CAAe3C,SAAUxC,EACxBuK,GAAIvK,EAAKuK,GACTxG,UAAW,SACXX,SAAUwI,EAAalK,SAAS1B,GAChCS,QAAUC,IACRA,EAAEvC,kBACFmR,GAAa5O,EAAGV,EAAK,EAEvBoT,cAAeA,KACb3Q,GAAWzC,EAAK,EAElByC,WAAYA,GACZhF,UAAWA,GAAUuC,GACrBqT,UAAWnG,GACXoG,YAAc5S,MAEdgQ,WAAY1Q,EAAKsB,SAAYZ,IAC3BA,EAAExC,gBAAgB,OAChB,EACJyS,OAASjQ,KACP6N,EAAAA,GAAAA,IAAM,SAAU7N,GAChBA,EAAEvC,kBACFiS,GAAiBpQ,EAAK,GAtBnBA,EAAKuK,YA4BtCtL,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACoE,UAAW,SAAUyN,eAAgB,SAAUvN,WAAY,aAAciQ,UAAW,EAAE/V,UAC3FyB,EAAAA,EAAAA,MAACgU,GAAAA,EAAK,CAAClT,MAAO2L,EAAa5M,OAAS,EAAI,EAAI,EAAEtB,SAAA,EAC5CuB,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CAACC,QAAS,QAASF,MAAO,gBAAiBR,UAAW,SACrDW,iBAAiB,EAAM1G,SAC/BkO,EAAa5M,OAAS,IAAMyN,EAAE,YAAc,MAAOhI,EAAAA,EAAAA,KAAoBiP,EAAAA,EAAAA,IAAa9H,OAExF3M,EAAAA,EAAAA,KAACiF,EAAAA,GAAU,CAACC,QAAS,QAASF,MAAO,gBAAiBR,UAAW,SACrDW,iBAAiB,EAAM1G,SAC/BgO,EAAY1M,OAAS,IAAMyN,EAAE,SAAW,MAAOhI,EAAAA,EAAAA,KAAoBiP,EAAAA,EAAAA,IAAahI,aAKlF,EAGV,GAAe5N,EAAAA,KAAW+M,G","sources":["component/menu/ContextMenu.tsx","domain/driver/component/FileIcon.tsx","domain/driver/component/FileItemLink.tsx","domain/driver/component/FileItemRow.tsx","domain/driver/component/FileItemBlock.tsx","domain/driver/component/actions/OpenFolderButton.tsx","domain/driver/component/actions/ShareButton.tsx","domain/driver/component/actions/DeleteButton.tsx","domain/driver/component/actions/FileRenameButton.tsx","component/button/MultiStatusButton.tsx","domain/driver/component/actions/LayoutSwitchButton.tsx","domain/driver/component/actions/SorterButton.tsx","domain/driver/component/actions/CopySiteLinkButton.tsx","domain/driver/DriverWidget.tsx"],"sourcesContent":["import React, {useCallback} from \"react\";\r\nimport {Menu, MenuItem, Stack, StackProps} from \"@mui/material\";\r\nimport ListComponent from \"../container/ListComponent\";\r\nimport {useLongPress} from 'use-long-press';\r\nimport {isMobile} from 'react-device-detect';\r\n\r\ntype ContextMenuProps = {\r\n  menuItems: React.ReactElement[],\r\n  enableLongPress?: boolean,\r\n} & StackProps;\r\nconst ContextMenuWithLongPres = ({\r\n                                   menuItems,\r\n                                   children,\r\n                                   ...rest\r\n                                 }: Omit<ContextMenuProps, \"enableLongPress\">) => {\r\n\r\n  const [contextMenu, setContextMenu] = React.useState<{\r\n    mouseX: number;\r\n    mouseY: number;\r\n  } | null>(null);\r\n\r\n  const handleContextMenu = useCallback((event: any) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    setContextMenu(\r\n        contextMenu === null\r\n            ? {\r\n              mouseX: event.clientX + 2,\r\n              mouseY: event.clientY - 6,\r\n            }\r\n            : // repeated contextmenu when it is already open closes it with Chrome 84 on Ubuntu\r\n              // Other native context menus might behave different.\r\n              // With this behavior we prevent contextmenu from the backdrop to re-locale existing context menus.\r\n            null,\r\n    );\r\n  }, []);\r\n\r\n  const handleContextMenuLongPress = useCallback((event: any) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    setContextMenu(\r\n        contextMenu === null\r\n            ? {\r\n              mouseX: event.clientX > window.screen.width / 2 ? event.clientX - 200 : event.clientX + 100,\r\n              mouseY: event.clientY - 6,\r\n            }\r\n            : // repeated contextmenu when it is already open closes it with Chrome 84 on Ubuntu\r\n              // Other native context menus might behave different.\r\n              // With this behavior we prevent contextmenu from the backdrop to re-locale existing context menus.\r\n            null,\r\n    );\r\n  }, []);\r\n\r\n  const longPressEvent = useLongPress(handleContextMenuLongPress, {\r\n    threshold: 500,\r\n  });\r\n\r\n\r\n  const handleClose = () => {\r\n    setContextMenu(null);\r\n  };\r\n  if (menuItems.length === 0) {\r\n    return <Stack {...rest}>\r\n      {children}\r\n    </Stack>;\r\n  }\r\n\r\n\r\n  return <Stack onContextMenu={handleContextMenu}  {...longPressEvent()} {...rest}>\r\n    {children}\r\n    <Menu\r\n        open={contextMenu !== null}\r\n        onClose={handleClose}\r\n        anchorReference=\"anchorPosition\"\r\n        anchorPosition={\r\n          contextMenu !== null\r\n              ? {top: contextMenu.mouseY, left: contextMenu.mouseX}\r\n              : undefined\r\n        }\r\n    >\r\n      <ListComponent data={menuItems} renderItem={(item: React.ReactElement, index?: number) => {\r\n        // special handling for anchor tags\r\n        if (item.type === \"a\") {\r\n          return <a href={item.props.href}\r\n                    style={item.props.style}\r\n                    target={item.props.target}\r\n                    download={item.props.download}\r\n                    rel={item.props.rel}\r\n                    onClick={(e) => {\r\n                      handleClose();\r\n                      e.stopPropagation();\r\n                    }}\r\n                    onContextMenu={(e) => {\r\n                      // use browser context menu\r\n                      e.stopPropagation();\r\n                    }}><MenuItem key={index}\r\n                                 sx={{padding: 0, margin: 0}}\r\n          >{item.props.children}</MenuItem></a>;\r\n        }\r\n        return <MenuItem key={index} onClick={(e) => {\r\n          handleClose();\r\n        }}\r\n        sx={{padding: 0, margin: 0}}\r\n        >{item}</MenuItem>;\r\n      }}/>\r\n    </Menu>\r\n  </Stack>;\r\n}\r\n\r\n\r\nconst ContextMenuWithoutLongPress = ({\r\n                                       menuItems,\r\n                                       children,\r\n                                       ...rest\r\n                                     }: Omit<ContextMenuProps, \"enableLongPress\">) => {\r\n\r\n  const [contextMenu, setContextMenu] = React.useState<{\r\n    mouseX: number;\r\n    mouseY: number;\r\n  } | null>(null);\r\n\r\n  const handleContextMenu = useCallback((event: any) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    setContextMenu(\r\n        contextMenu === null\r\n            ? {\r\n              mouseX: event.clientX + 2,\r\n              mouseY: event.clientY - 6,\r\n            }\r\n            : // repeated contextmenu when it is already open closes it with Chrome 84 on Ubuntu\r\n              // Other native context menus might behave different.\r\n              // With this behavior we prevent contextmenu from the backdrop to re-locale existing context menus.\r\n            null,\r\n    );\r\n  }, []);\r\n\r\n  const handleClose = () => {\r\n    setContextMenu(null);\r\n  };\r\n  if (menuItems.length === 0) {\r\n    return <Stack {...rest}>\r\n      {children}\r\n    </Stack>;\r\n  }\r\n  return <Stack onContextMenu={handleContextMenu} {...rest}>\r\n    {children}\r\n    <Menu\r\n        open={contextMenu !== null}\r\n        onClose={handleClose}\r\n        anchorReference=\"anchorPosition\"\r\n        anchorPosition={\r\n          contextMenu !== null\r\n              ? {top: contextMenu.mouseY, left: contextMenu.mouseX}\r\n              : undefined\r\n        }\r\n    >\r\n      <ListComponent data={menuItems} renderItem={(item: React.ReactElement, index?: number) => {\r\n        // special handling for anchor tags\r\n        if (item.type === \"a\") {\r\n          return <a href={item.props.href}\r\n                    style={item.props.style}\r\n                    target={item.props.target}\r\n                    download={item.props.download}\r\n                    rel={item.props.rel}\r\n                    onClick={(e) => {\r\n                      handleClose();\r\n                      e.stopPropagation();\r\n                    }}\r\n                    onContextMenu={(e) => {\r\n                      // use browser context menu\r\n                      e.stopPropagation();\r\n                    }}><MenuItem key={index}\r\n          >{item.props.children}</MenuItem></a>;\r\n        }\r\n        return <MenuItem key={index}\r\n                         sx={{padding: 0, margin: 0}}\r\n                         onClick={(e) => {\r\n          handleClose();\r\n        }}>{item}</MenuItem>;\r\n      }}/>\r\n    </Menu>\r\n  </Stack>;\r\n}\r\n\r\nconst ContextMenu = ({\r\n                       menuItems,\r\n                       enableLongPress = isMobile,\r\n                       children,\r\n                       ...rest\r\n                     }: ContextMenuProps) => {\r\n  if (enableLongPress) {\r\n    return <ContextMenuWithLongPres menuItems={menuItems} children={children} {...rest}/>;\r\n  } else {\r\n    return <ContextMenuWithoutLongPress menuItems={menuItems} children={children} {...rest}/>;\r\n  }\r\n}\r\n\r\nexport default ContextMenu;","import {SvgIconProps} from '@mui/material/SvgIcon';\r\nimport * as React from 'react';\r\nimport FolderIcon from \"@mui/icons-material/Folder\";\r\nimport LanguageIcon from '@mui/icons-material/Language';\r\nimport InsertDriveFileIcon from \"@mui/icons-material/InsertDriveFile\";\r\nimport InsertPhotoIcon from '@mui/icons-material/InsertPhoto';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport VideoFileIcon from '@mui/icons-material/VideoFile';\r\nimport AudioFileIcon from '@mui/icons-material/AudioFile';\r\nimport FontDownloadIcon from '@mui/icons-material/FontDownload';\r\nimport CssIcon from '@mui/icons-material/Css';\r\nimport JavascriptIcon from '@mui/icons-material/Javascript';\r\nimport HtmlIcon from '@mui/icons-material/Html';\r\n\r\n\r\ntype FileIconProp = {\r\n  isFolder: boolean;\r\n  contentType?: string;\r\n  isPublic: boolean;\r\n} & SvgIconProps;\r\n\r\nexport const FileIcon = ({\r\n                           contentType = void 0,\r\n                           isFolder = false,\r\n                           isPublic = false,\r\n                           ...rest\r\n                         }: FileIconProp) => {\r\n  if (isFolder) {\r\n    return <FolderIcon {...rest}/>\r\n  }\r\n  if (!contentType) {\r\n    return <LanguageIcon {...rest}/>;\r\n  }\r\n  const type = contentType.includes(\"/\") ? contentType.split(\"/\")[0] : contentType;\r\n  const subType = contentType.includes(\"/\") ? contentType.split(\"/\")[1] : \"\";\r\n  switch (type) {\r\n    case \"image\":\r\n      return <InsertPhotoIcon {...rest}/>\r\n    case \"text\":\r\n      switch (subType) {\r\n        case \"css\":\r\n          return <CssIcon {...rest}/>\r\n        case \"javascript\":\r\n          return <JavascriptIcon {...rest}/>\r\n        case \"html\":\r\n          return <HtmlIcon {...rest}/>\r\n        default:\r\n          return <DescriptionIcon {...rest}/>\r\n      }\r\n    case \"video\":\r\n      return <VideoFileIcon {...rest}/>\r\n    case \"audio\":\r\n      return <AudioFileIcon {...rest}/>\r\n    case \"font\":\r\n      return <FontDownloadIcon {...rest}/>\r\n    default:\r\n      return <InsertDriveFileIcon {...rest}/>\r\n  }\r\n};\r\n","// @flow\r\nimport * as React from 'react';\r\nimport {Link} from \"@mui/material\";\r\nimport {DriverFileProfile} from \"../../../proto/application/driver/DriverMessage\";\r\nimport {DTARGET} from \"../../../api/util/constants\";\r\n\r\ntype FileItemLinkProps = {\r\n  fileItem: DriverFileProfile;\r\n  openAction?: (fileItem: DriverFileProfile) => void;\r\n};\r\nexport const FileItemLink = ({fileItem, openAction}: FileItemLinkProps) => {\r\n  return <Link\r\n      target={fileItem.isFolder ? void 0 : DTARGET}\r\n      onContextMenu={(e) => {\r\n        if (!fileItem.isFolder) {\r\n          e.stopPropagation();\r\n        }\r\n      }}\r\n      href={fileItem.url || fileItem.fileMetaData?.url || void 0}\r\n      component={\"a\"}\r\n      onClick={(e) => {\r\n        if (fileItem.isFolder) {\r\n          e.stopPropagation();\r\n          openAction?.(fileItem);\r\n        }\r\n      }}\r\n  >{fileItem.name}</Link>;\r\n};","// @flow\r\nimport * as React from 'react';\r\nimport {DriverFileProfile} from \"../../../proto/application/driver/DriverMessage\";\r\nimport ContextMenu from \"../../../component/menu/ContextMenu\";\r\nimport {Stack, StackProps} from \"@mui/material\";\r\nimport BreakpointContainer from \"../../../component/container/BreakpointContainer\";\r\nimport {FileIcon} from \"./FileIcon\";\r\nimport {Typography} from \"../../../component/wrapper/MuiWrappers\";\r\nimport {getFileType, getReadableFileSize, toDisplayTime, toVisibility} from \"../util/Utils\";\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport MenuButton from \"../../../component/button/MenuButton\";\r\nimport {isMobile} from 'react-device-detect';\r\nimport {FileItemLink} from \"./FileItemLink\";\r\n\r\ntype FileItemRowProps = {\r\n  fileItem: DriverFileProfile;\r\n  selected: boolean;\r\n  menuItems?: React.ReactElement[];\r\n  openAction?: (fileItem: DriverFileProfile) => void;\r\n} & StackProps;\r\nexport const FileItemRow = ({\r\n                              fileItem,\r\n                              selected,\r\n                              menuItems,\r\n                              openAction,\r\n                              ...rest\r\n                            }: FileItemRowProps) => {\r\n  const isFolder = fileItem.isFolder;\r\n  const isPublic = fileItem.isPublic;\r\n  return <ContextMenu direction={\"row\"} spacing={1} alignItems={\"center\"} textAlign={\"start\"}\r\n                      menuItems={menuItems ?? []}\r\n                      enableLongPress={isMobile}\r\n                      sx={{\r\n                        backgroundColor: selected ? \"rgba(194, 231, 255,1)\" : \"transparent\",\r\n                        paddingY: 1.5,\r\n                        paddingX: 2,\r\n                        '&:hover': {\r\n                          backgroundColor: selected ? \"rgba(194, 231, 255,1)\" : \"rgba(0, 0, 0, 0.1)\",\r\n                        }\r\n                      }}\r\n                      {...rest}>\r\n    <BreakpointContainer up={\"md\"}>\r\n      <Stack direction={\"row\"} spacing={1} alignItems={\"center\"} className={\"pointer\"} flexGrow={1}>\r\n        <FileIcon isFolder={isFolder} contentType={fileItem.fileMetaData?.contentType}\r\n                  isPublic={isPublic} color={selected ? \"primary\" : \"inherit\"}/>\r\n        <Typography variant={\"body1\"} enableTranslate={false}\r\n                    flexGrow={1}>\r\n          <FileItemLink fileItem={fileItem} openAction={openAction}/>\r\n        </Typography>\r\n        <Typography variant={\"body1\"} enableTranslate={false}\r\n                    flexBasis={\"100px\"}>{getFileType(fileItem)}</Typography>\r\n        <Typography variant={\"body1\"}\r\n                    enableTranslate={false}\r\n                    flexBasis={\"200px\"}>{toDisplayTime(fileItem.lastModifiedDate)}</Typography>\r\n        <Typography variant={\"body1\"}\r\n                    enableTranslate={false}\r\n                    flexBasis={\"100px\"}>{getReadableFileSize(fileItem.fileMetaData?.sizeInBytes)}</Typography>\r\n        <Typography variant={\"body1\"}\r\n                    enableTranslate={false}\r\n                    flexBasis={\"100px\"}>{toVisibility(fileItem.isPublic)}</Typography>\r\n      </Stack>\r\n    </BreakpointContainer>\r\n    <BreakpointContainer down={\"md\"}>\r\n      <Stack direction={\"row\"} spacing={2} alignItems={\"center\"} className={\"pointer\"} flexGrow={1}>\r\n        <FileIcon isFolder={isFolder} contentType={fileItem.fileMetaData?.contentType}\r\n                  isPublic={isPublic} fontSize={\"large\"} color={selected ? \"primary\" : \"inherit\"}/>\r\n        <Stack direction={\"column\"} spacing={1} flexGrow={1}>\r\n          <Typography variant={\"body1\"} enableTranslate={false}\r\n                      flexGrow={1}> <FileItemLink fileItem={fileItem}\r\n                                                  openAction={openAction}/></Typography>\r\n          <Stack direction={\"row\"} spacing={1} alignItems={\"center\"}>\r\n            <Typography variant={\"caption\"}\r\n                        enableTranslate={false}>{toDisplayTime(fileItem.lastModifiedDate)}</Typography>\r\n            <Typography variant={\"caption\"}\r\n                        enableTranslate={false}>{getReadableFileSize(fileItem.fileMetaData?.sizeInBytes)}</Typography>\r\n            <Typography variant={\"caption\"}\r\n                        enableTranslate={false}>{toVisibility(fileItem.isPublic)}</Typography>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n    </BreakpointContainer>\r\n    {(menuItems && menuItems.length > 0 && isMobile) &&\r\n        <MenuButton icon=<MoreVertIcon/> sx={{borderRadius: \"500px\"}} menuAlign={\"right\"}\r\n                    stopPropagation={true}\r\n                    menuItems={menuItems}/>}\r\n\r\n  </ContextMenu>;\r\n}","import * as React from 'react';\r\nimport {DriverFileProfile} from \"../../../proto/application/driver/DriverMessage\";\r\nimport ContextMenu from \"../../../component/menu/ContextMenu\";\r\nimport {Badge, Box, StackProps} from \"@mui/material\";\r\nimport {FileIcon} from \"./FileIcon\";\r\nimport {Typography} from \"../../../component/wrapper/MuiWrappers\";\r\nimport {getReadableFileSize, toDisplayTime, toVisibility} from \"../util/Utils\";\r\nimport LockIcon from '@mui/icons-material/Lock';\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport MenuButton from \"../../../component/button/MenuButton\";\r\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\r\nimport {isMobile} from 'react-device-detect';\r\nimport {FileItemLink} from \"./FileItemLink\";\r\n\r\ntype FileItemBlockProps = {\r\n  fileItem: DriverFileProfile;\r\n  selected: boolean;\r\n  menuItems?: React.ReactElement[];\r\n  iconSize?: number;\r\n  openAction?: (fileItem: DriverFileProfile) => void;\r\n} & StackProps;\r\nexport const FileItemBlock = ({\r\n                                fileItem,\r\n                                selected,\r\n                                menuItems,\r\n                                iconSize = 6,\r\n                                openAction,\r\n                                ...rest\r\n                              }: FileItemBlockProps) => {\r\n  const isFolder = fileItem.isFolder;\r\n  const isPublic = fileItem.isPublic;\r\n  return <ContextMenu direction={\"column\"} spacing={1} alignItems={\"center\"} textAlign={\"center\"}\r\n                      flexShrink={1}\r\n                      enableLongPress={isMobile}\r\n                      menuItems={menuItems ?? []}\r\n                      sx={{\r\n                        backgroundColor: selected ? \"rgba(194, 231, 255,1)\" : \"transparent\",\r\n                        paddingY: 1,\r\n                        paddingX: 1.5,\r\n                        borderRadius: 1,\r\n                        '&:hover': {\r\n                          backgroundColor: selected ? \"rgba(194, 231, 255,1)\" : \"rgba(0, 0, 0, 0.1)\",\r\n                        }\r\n                      }}\r\n                      title={`${toDisplayTime(fileItem.lastModifiedDate)}\\n${getReadableFileSize(fileItem.fileMetaData?.sizeInBytes)}\\n${toVisibility(fileItem.isPublic)}`}\r\n                      {...rest}>\r\n    <Box>\r\n      <Badge sx={{\r\n        \"& .MuiBadge-badge\": {height: iconSize * 4, minWidth: iconSize * 3}\r\n      }}\r\n             badgeContent={\r\n               (isMobile && menuItems && menuItems.length > 0) ?\r\n                   <MenuButton icon={<MoreVertIcon color={\"success\"}/>} menuAlign={\"right\"}\r\n                               stopPropagation={true}\r\n                               menuItems={menuItems}/> : void 0\r\n             }\r\n\r\n             overlap=\"circular\"\r\n             anchorOrigin={{\r\n               vertical: 'top',\r\n               horizontal: 'right',\r\n             }}>\r\n        <Badge sx={{\r\n          \"& .MuiBadge-badge\": {height: iconSize * 4, minWidth: iconSize * 3}\r\n        }}\r\n               badgeContent={isPublic ? <DoneIcon sx={{\r\n                 fontSize: `${iconSize / 5}rem`\r\n               }}/> : <LockIcon sx={{\r\n                 fontSize: `${iconSize / 5}rem`\r\n               }}/>}\r\n               color={isPublic ? \"success\" : \"warning\"}\r\n               overlap=\"circular\"\r\n\r\n               anchorOrigin={{\r\n                 vertical: 'bottom',\r\n                 horizontal: 'right',\r\n               }}>\r\n          <FileIcon isFolder={isFolder} contentType={fileItem.fileMetaData?.contentType}\r\n                    isPublic={isPublic} color={selected ? \"primary\" : \"inherit\"} sx={{\r\n            fontSize: `${iconSize}rem`\r\n          }}/>\r\n        </Badge>\r\n      </Badge>\r\n      <Typography variant={\"body1\"} enableTranslate={false} flexGrow={1}>\r\n        <FileItemLink fileItem={fileItem} openAction={openAction}/></Typography>\r\n      <Typography variant={\"caption\"}\r\n                  enableTranslate={false}>{getReadableFileSize(fileItem.fileMetaData?.sizeInBytes)}</Typography>\r\n    </Box>\r\n  </ContextMenu>;\r\n}","import * as React from 'react';\r\nimport ContentButton, {ContentButtonProps} from \"../../../../component/button/ContentButton\";\r\nimport {get_driver_url} from \"../../../../navigation/routerUtil\";\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\n\r\ntype OpenFolderButtonProps = {\r\n  folderId: string,\r\n  target?: string,\r\n} & ContentButtonProps;\r\nexport const OpenFolderButton = ({\r\n                                   folderId,\r\n                                   title = \"Open\",\r\n                                   target = \"_blank\",\r\n                                   ...rest\r\n                                 }: OpenFolderButtonProps) => {\r\n  return <ContentButton\r\n      icon={<OpenInNewIcon/>}\r\n      onClick={() => {\r\n    window.open(get_driver_url(folderId), target);\r\n  }}\r\n                        title={title} {...rest}\r\n  />;\r\n};","import * as React from 'react';\r\nimport ContentButton, {ContentButtonProps} from \"../../../../component/button/ContentButton\";\r\nimport {setVisibility} from \"../../service/DriverService\";\r\nimport ShareIcon from '@mui/icons-material/Share';\r\nimport LockIcon from '@mui/icons-material/Lock';\r\nimport AlertContext from \"../../../../context/AlertContext\";\r\n\r\ntype ShareButtonProps = {\r\n  fileId: string,\r\n  isPublic: boolean,\r\n  onVisibilityChange: () => void,\r\n} & ContentButtonProps;\r\nexport const ShareButton = ({\r\n                              fileId,\r\n                              isPublic,\r\n                              onVisibilityChange,\r\n                              ...rest\r\n                            }: ShareButtonProps) => {\r\n  const {showAlert} = React.useContext(AlertContext);\r\n  return <ContentButton\r\n      icon={isPublic ? <LockIcon/> : <ShareIcon/>}\r\n      onClick={() => {\r\n        setVisibility(fileId, !isPublic)\r\n        .then(() => {\r\n          onVisibilityChange();\r\n        })\r\n        .catch((e) => {\r\n              showAlert(\"Failed to change: \" + e.message);\r\n            }\r\n        )\r\n      }}\r\n      title={isPublic ? \"UnShare\" : \"Share\"} {...rest}\r\n  />;\r\n};","// @flow\r\nimport * as React from 'react';\r\nimport ContentButton, {ContentButtonProps} from \"../../../../component/button/ContentButton\";\r\nimport AlertContext from \"../../../../context/AlertContext\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {deleteFile} from \"../../service/DriverService\";\r\n\r\ntype DeleteButtonProps = {\r\n  fileId: string;\r\n  onDelete: () => void;\r\n} & ContentButtonProps;\r\nexport const DeleteButton = ({\r\n                               fileId,\r\n                               onDelete,\r\n                               title = \"Delete\",\r\n                               color = \"error\",\r\n                               ...rest\r\n                             }: DeleteButtonProps) => {\r\n  const {showAlert} = React.useContext(AlertContext);\r\n  return <ContentButton\r\n      icon={<DeleteIcon color={color}/>}\r\n      color={color}\r\n      onClick={() => {\r\n        deleteFile(fileId)\r\n        .then(() => {\r\n          onDelete();\r\n        })\r\n        .catch((e) => {\r\n              showAlert(\"Failed to delete: \" + e.message);\r\n            }\r\n        )\r\n      }}\r\n      title={title} {...rest}\r\n  />;\r\n};","import * as React from 'react';\r\nimport ContentButton, {ContentButtonProps} from \"../../../../component/button/ContentButton\";\r\nimport {DialogNames, openDialogWithPromise} from \"../../../../component/dialog/DialogManager\";\r\nimport DriveFileRenameOutlineIcon from '@mui/icons-material/DriveFileRenameOutline';\r\n\r\ntype FileRenameButtonProps = {\r\n  fileId: string,\r\n  existingName: string,\r\n  onRename: () => void,\r\n\r\n} & ContentButtonProps;\r\nexport const FileRenameButton = ({\r\n                                   fileId,\r\n                                   existingName,\r\n                                   onRename,\r\n                                   title = \"Rename\",\r\n                                   ...rest\r\n                                 }: FileRenameButtonProps) => {\r\n  return <ContentButton\r\n      icon={<DriveFileRenameOutlineIcon/>}\r\n      onClick={async () => {\r\n        const result = await openDialogWithPromise(DialogNames.RenameDriverFileDialog, {\r\n          filename: existingName,\r\n          fileId: fileId\r\n        });\r\n        if (result.success) {\r\n          onRename();\r\n        }\r\n      }}\r\n      title={title}\r\n      {...rest}\r\n  ></ContentButton>;\r\n};","import * as React from 'react';\r\nimport ContentButton, {ContentButtonProps} from \"./ContentButton\";\r\nimport MenuButton, {MenuButtonProps} from \"./MenuButton\";\r\nimport {menuItemStyle} from \"../../api/util/constants\";\r\n\r\n// 可显示当前状态的菜单按钮，点击后执行按钮的函数并更新状态\r\nexport type MultiStatusButtonProps = {\r\n  currentStatus: string,\r\n  statusToContentButtonProps: {\r\n    [key: string]: ContentButtonProps,\r\n  }\r\n  onStatusChange: (newStatus: string) => void,\r\n} & Omit<MenuButtonProps, \"menuItems\">;\r\nexport const MultiStatusButton = ({\r\n                                    currentStatus,\r\n                                    statusToContentButtonProps,\r\n                                    onStatusChange,\r\n                                    ...rest\r\n                                  }: MultiStatusButtonProps) => {\r\n  return <MenuButton\r\n      title={statusToContentButtonProps[currentStatus].title}\r\n      menuItems={Object.keys(statusToContentButtonProps).map((status) => {\r\n        const {onClick, ...rest2} = statusToContentButtonProps[status];\r\n        return <ContentButton key={status}\r\n                              sx = {menuItemStyle}\r\n                              onClick={(e) => {\r\n                                if (onClick) {\r\n                                  onClick(e);\r\n                                }\r\n                                onStatusChange(status);\r\n                              }}\r\n                              {...rest2}/>;\r\n      })}\r\n      {...rest} />;\r\n};\r\n\r\n","// @flow\r\nimport * as React from 'react';\r\nimport {MultiStatusButton} from \"../../../../component/button/MultiStatusButton\";\r\nimport {MenuButtonProps} from \"../../../../component/button/MenuButton\";\r\nimport GridViewIcon from '@mui/icons-material/GridView';\r\nimport ViewListIcon from '@mui/icons-material/ViewList';\r\n\r\nexport type LayoutStatus = \"stack\" | \"grid\";\r\n\r\nconst statusToContentButtonProps = {\r\n  stack: {\r\n    title: \"List\",\r\n    icon: <ViewListIcon/>\r\n  },\r\n  grid: {\r\n    title: \"Grid\",\r\n    icon: <GridViewIcon/>\r\n  },\r\n}\r\n\r\nexport type LayoutSwitchButtonProps = {\r\n  currentLayout: LayoutStatus;\r\n  onLayoutChange: (layout: LayoutStatus) => void;\r\n} & Omit<MenuButtonProps, \"menuItems\">;\r\n\r\nexport const LayoutSwitchButton = ({\r\n                                     currentLayout,\r\n                                     onLayoutChange,\r\n                                     ...rest\r\n                                   }: LayoutSwitchButtonProps) => {\r\n  return <MultiStatusButton\r\n      currentStatus={currentLayout}\r\n      statusToContentButtonProps={statusToContentButtonProps}\r\n      onStatusChange={(status) => {\r\n        onLayoutChange(status as LayoutStatus);\r\n      }}\r\n      icon={statusToContentButtonProps[currentLayout].icon}\r\n      {...rest}\r\n  ></MultiStatusButton>\r\n};","// @flow\r\nimport * as React from 'react';\r\nimport {MenuButtonProps} from \"../../../../component/button/MenuButton\";\r\nimport {MultiStatusButton} from \"../../../../component/button/MultiStatusButton\";\r\nimport FormatColorTextIcon from '@mui/icons-material/FormatColorText';\r\nimport CategoryIcon from '@mui/icons-material/Category';\r\nimport ViewInArIcon from '@mui/icons-material/ViewInAr';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\r\nimport {DriverFileProfile} from \"../../../../proto/application/driver/DriverMessage\";\r\n\r\nexport type SorterStatus = \"name\" | \"size\" | \"time\" | \"type\" | \"visibility\";\r\n\r\nconst statusToSorterButtonProps = {\r\n  name: {\r\n    title: \"Name\",\r\n    icon: <FormatColorTextIcon/>\r\n  },\r\n  type: {\r\n    title: \"Type\",\r\n    icon: <CategoryIcon/>\r\n  },\r\n  time: {\r\n    title: \"Last Modified\",\r\n    icon: <AccessTimeIcon/>\r\n  },\r\n  size: {\r\n    title: \"Size\",\r\n    icon: <ViewInArIcon/>\r\n  },\r\n  visibility: {\r\n    title: \"Visibility\",\r\n    icon: <VisibilityIcon/>\r\n  }\r\n}\r\n\r\ntype SorterButtonProps = {\r\n  currentSorter: SorterStatus,\r\n  onSorterChange: (newSorter: SorterStatus) => void,\r\n} & Omit<MenuButtonProps, \"menuItems\">;\r\n\r\nexport const SorterButton = ({\r\n                               currentSorter,\r\n                               onSorterChange,\r\n                               ...rest\r\n                             }: SorterButtonProps) => {\r\n  return <MultiStatusButton\r\n      currentStatus={currentSorter}\r\n      statusToContentButtonProps={statusToSorterButtonProps}\r\n      onStatusChange={(status) => {\r\n        onSorterChange(status as SorterStatus);\r\n      }}\r\n      icon={statusToSorterButtonProps[currentSorter].icon}\r\n      {...rest}\r\n  ></MultiStatusButton>\r\n};\r\n\r\nexport const fileComparator = (a: DriverFileProfile, b: DriverFileProfile, sorter: SorterStatus, reverse: boolean) => {\r\n  let result = 0;\r\n\r\n  // 文件夹排在前面\r\n  if (a.isFolder && !b.isFolder) {\r\n    result = 1;\r\n    return reverse ? -result : result;\r\n  } else if (!a.isFolder && b.isFolder) {\r\n    result = -1;\r\n    return reverse ? -result : result\r\n  }\r\n\r\n  switch (sorter) {\r\n    case \"size\":\r\n      result = (a.fileMetaData?.sizeInBytes || 0) - (b.fileMetaData?.sizeInBytes || 0);\r\n      break;\r\n    case \"time\":\r\n      result = a.lastModifiedDate - b.lastModifiedDate;\r\n      break;\r\n    case \"type\":\r\n      result = (a.fileMetaData?.contentType || \"\").localeCompare(b.fileMetaData?.contentType || \"\");\r\n      break;\r\n    case \"visibility\":\r\n      result = a.isPublic ? 1 : -1 - (b.isPublic ? 1 : -1);\r\n      break;\r\n    case \"name\":\r\n    default:\r\n      result = a.name.localeCompare(b.name);\r\n      break;\r\n  }\r\n\r\n  if (result === 0) {\r\n    // id must be unique\r\n    result = a.id.localeCompare(b.id);\r\n  }\r\n\r\n  return reverse ? -result : result;\r\n\r\n}","import * as React from 'react';\r\nimport ContentButton, {ContentButtonProps} from \"../../../../component/button/ContentButton\";\r\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\r\nimport copy from 'copy-to-clipboard';\r\nimport {get_driver_url} from \"../../../../navigation/routerUtil\";\r\n\r\ntype CopySiteLinkButtonProps = {\r\n  itemId: string,\r\n} & ContentButtonProps;\r\nconst CopySiteLinkButton = ({\r\n                                     itemId,\r\n                                     title = \"Copy Link\",\r\n                                     ...rest\r\n                                   }: CopySiteLinkButtonProps) => {\r\n  return <ContentButton\r\n      icon={<ContentCopyIcon/>}\r\n      onClick={() => {\r\n        copy(window.location.host + get_driver_url(itemId));\r\n      }}\r\n      title={title}\r\n      {...rest}\r\n  ></ContentButton>;\r\n};\r\n\r\nexport default CopySiteLinkButton;","import * as React from 'react';\r\nimport {useEffect, useRef} from 'react';\r\nimport ListComponent from \"../../component/container/ListComponent\";\r\nimport {DriverFileProfile} from \"../../proto/application/driver/DriverMessage\";\r\nimport {FileItemRow} from \"./component/FileItemRow\";\r\nimport {FileItemBlock} from \"./component/FileItemBlock\";\r\nimport DriveFileMoveIcon from '@mui/icons-material/DriveFileMove';\r\nimport {Breadcrumbs, Checkbox, Divider, Link, Stack, StackProps, Switch} from \"@mui/material\";\r\nimport {Grid} from \"@mui/system\";\r\nimport {useSearchParams} from \"react-router-dom\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AlertContext from \"../../context/AlertContext\";\r\nimport {getLink, getReadableFileSize, getTotalSize} from \"./util/Utils\";\r\nimport {OpenFolderButton} from \"./component/actions/OpenFolderButton\";\r\nimport {ShareButton} from \"./component/actions/ShareButton\";\r\nimport {DeleteButton} from \"./component/actions/DeleteButton\";\r\nimport {FileRenameButton} from \"./component/actions/FileRenameButton\";\r\nimport SortIcon from '@mui/icons-material/Sort';\r\nimport {LayoutStatus, LayoutSwitchButton} from \"./component/actions/LayoutSwitchButton\";\r\nimport OneOf from \"../../component/container/OneOf\";\r\nimport {CustomerProfile} from \"../../proto/framework/customer/CustomerInfo\";\r\nimport {deleteFile, getFile, getFileId, moveFile} from \"./service/DriverService\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport CreateNewFolderIcon from '@mui/icons-material/CreateNewFolder';\r\nimport {fileComparator, SorterButton, SorterStatus} from \"./component/actions/SorterButton\";\r\nimport ContentButton from \"../../component/button/ContentButton\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport BreakpointContainer from \"../../component/container/BreakpointContainer\";\r\nimport MenuButton from \"../../component/button/MenuButton\";\r\nimport {DialogNames, openDialogWithPromise} from \"../../component/dialog/DialogManager\";\r\nimport {NewFolderDialogIType} from \"./component/dialogs/NewFolderDialog\";\r\nimport AddLinkIcon from '@mui/icons-material/AddLink';\r\nimport {NewLinkFileDialogIType} from \"./component/dialogs/NewLinkFileDialog\";\r\nimport Selecto from \"react-selecto\";\r\nimport {print} from \"../../api/util/Logging\";\r\nimport {FormControlLabel, Typography} from \"../../component/wrapper/MuiWrappers\";\r\nimport {isMobile} from \"react-device-detect\";\r\nimport FileUploadIcon from \"@mui/icons-material/FileUpload\";\r\nimport {DriverUploadDialogIType} from \"./component/dialogs/DriverUploadDialog\";\r\nimport {Condition} from \"../../component/container/Condition\";\r\nimport {useIsUserOrAdmin} from \"../../hook/CommonUiHook\";\r\nimport CopySiteLinkButton from \"./component/actions/CopySiteLinkButton\";\r\nimport {MoveDriverFileDialogIType} from \"./component/dialogs/MoveDriverFileDialog\";\r\nimport {DTARGET, menuItemStyle} from \"../../api/util/constants\";\r\n\r\ntype DriverWidgetProps = {} & StackProps;\r\n\r\nconst DriverWidget = ({\r\n                        ...rest\r\n                      }: DriverWidgetProps) => {\r\n\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [update, setUpdate] = React.useState(false);\r\n  const currentFileId = searchParams.get(\"id\");\r\n  const [currentRoot, setCurrentRoot] = React.useState<DriverFileProfile>(DriverFileProfile.create());\r\n  const [isFolder, setIsFolder] = React.useState(true);\r\n  const [currentFile, setCurrentFile] = React.useState<DriverFileProfile[]>([]);\r\n  const [selectedFile, setSelectedFile] = React.useState<DriverFileProfile[]>([]);\r\n  const [sortDirection, setSortDirection] = React.useState<boolean>(false);\r\n  const [currentSorter, setCurrentSorter] = React.useState<SorterStatus>(\"name\");\r\n\r\n  // raw path is the current path to the current folder, ends with \"/\"\r\n  // or the path to the current file, ends with the file name\r\n  const [rawPath, setRawPath] = React.useState<string>(\"/\");\r\n  // path is the array of path to the current folder / file. It does not include the root and the current folder\r\n  // it is calculated from rawPath\r\n  const [path, setPath] = React.useState<string[]>([]);\r\n  const [owner, setOwner] = React.useState<CustomerProfile | undefined>(void 0);\r\n  const canEdit = useIsUserOrAdmin(owner?.id);\r\n\r\n  const {showAlert} = React.useContext(AlertContext);\r\n  const {t} = useTranslation();\r\n  const [currentLayout, setCurrentLayout] = React.useState<LayoutStatus>(\"stack\");\r\n  const [continueSelect, setContinueSelect] = React.useState(false);\r\n  const [selectingMode, setSelectingMode] = React.useState(false);\r\n  const selectoRef = useRef<Selecto>(null);\r\n  const hasSelected = selectedFile.length > 0;\r\n\r\n  useEffect(() => {\r\n    // load data\r\n    getFile(currentFileId).then((response) => {\r\n      setCurrentRoot(response);\r\n      setSelectedFile([]);\r\n      selectoRef.current?.setSelectedTargets([]);\r\n      if (response.isFolder) {\r\n        if (response.name !== \"\") {\r\n          setRawPath(response.path + response.name + \"/\");\r\n        } else {\r\n          setRawPath(\"/\");\r\n        }\r\n      } else {\r\n        setRawPath(response.path + response.name);\r\n      }\r\n      setOwner(response.owner);\r\n      setIsFolder(response.isFolder);\r\n      if (response.isFolder) {\r\n        setCurrentFile(response.children.sort((a, b) => {\r\n          return fileComparator(a, b, currentSorter, sortDirection);\r\n        }));\r\n      } else {\r\n        setCurrentFile([response]);\r\n      }\r\n    }).catch((error) => {\r\n      showAlert(error.message, \"error\");\r\n    });\r\n  }, [currentFileId, update]);\r\n\r\n  useEffect(() => {\r\n    if (rawPath === \"/\") {\r\n      setPath([]);\r\n    } else {\r\n      const absPath = rawPath.endsWith(\"/\") ? rawPath.slice(0, rawPath.length - 1) : rawPath;\r\n      if (absPath === \"/\") {\r\n        setPath([]);\r\n        return\r\n      }\r\n      const finalPath = absPath.slice(1, absPath.lastIndexOf(\"/\"));\r\n      if (finalPath === \"\") {\r\n        setPath([]);\r\n        return;\r\n      } else {\r\n        setPath(finalPath.split(\"/\"));\r\n      }\r\n    }\r\n  }, [rawPath]);\r\n\r\n  useEffect(() => {\r\n    setCurrentFile((existing) => {\r\n      return [...existing].sort((a, b) => {\r\n        return fileComparator(a, b, currentSorter, sortDirection);\r\n      });\r\n    });\r\n  }, [currentSorter, sortDirection]);\r\n\r\n  const fileActions: React.ReactElement[] = [];\r\n  if (currentRoot.isFolder && canEdit) {\r\n    fileActions.push(\r\n        <ContentButton\r\n            disabled={!isFolder}\r\n            // a trick to avoid unselecting the selected file\r\n            onMouseEnter={() => {\r\n              setContinueSelect(true);\r\n            }}\r\n            onMouseLeave={() => {\r\n              setContinueSelect(false);\r\n            }\r\n            }\r\n            icon={<CreateNewFolderIcon/>} title={\"New Folder\"} onClick={(e) => {\r\n          e.stopPropagation();\r\n          print(selectedFile);\r\n          openDialogWithPromise<NewFolderDialogIType, DriverFileProfile>(DialogNames.NewFolderDialog, {\r\n            filePath: rawPath,\r\n            public: currentRoot.isPublic\r\n          })\r\n          .then((newFolderFile) => {\r\n            if (newFolderFile.data) {\r\n              print(newFolderFile.data);\r\n              setCurrentFile(existing => [...existing, newFolderFile.data as DriverFileProfile]);\r\n            }\r\n          }).catch((error) => {\r\n            showAlert(error.message, \"error\");\r\n          });\r\n        }}/>,\r\n        <ContentButton\r\n            disabled={!isFolder}\r\n            icon={<AddLinkIcon/>} title={\"New Link File\"} onClick={() => {\r\n          openDialogWithPromise<NewLinkFileDialogIType, DriverFileProfile>(DialogNames.NewLinkFileDialog, {\r\n            filePath: rawPath,\r\n            public: currentRoot.isPublic\r\n          })\r\n          .then((newLinkFile) => {\r\n            if (newLinkFile.data) {\r\n              setCurrentFile(existing => [...existing, (newLinkFile.data as DriverFileProfile)]);\r\n            }\r\n          }).catch((error) => {\r\n            showAlert(error.message, \"error\");\r\n          });\r\n        }}/>,\r\n        <ContentButton\r\n            disabled={!isFolder}\r\n            icon={<FileUploadIcon/>} title={\"Upload\"} onClick={() => {\r\n          openDialogWithPromise<DriverUploadDialogIType, void>(DialogNames.DriverUploadDialog, {\r\n            path: rawPath,\r\n            public: currentRoot.isPublic\r\n          })\r\n          .then(() => {\r\n            setUpdate(!update);\r\n          }).catch((error) => {\r\n            showAlert(error.message, \"error\");\r\n          });\r\n        }}/>\r\n    )\r\n    if (selectedFile.length >= 1) {\r\n      fileActions.push(<ContentButton\r\n          icon={<DriveFileMoveIcon/>} title={\"Move\"}\r\n          onMouseEnter={() => {\r\n            setContinueSelect(true);\r\n          }}\r\n          onMouseLeave={() => {\r\n            setContinueSelect(false);\r\n          }}\r\n          onClick={() => {\r\n            openDialogWithPromise<MoveDriverFileDialogIType, void>(DialogNames.MoveDriverFileDialog, {\r\n              fileId: selectedFile.map((value) => value.id),\r\n              currentPath: rawPath\r\n            }).then((result) => {\r\n              if (result) {\r\n                setUpdate(!update);\r\n              }\r\n            })\r\n          }}/>);\r\n\r\n      fileActions.push(<ContentButton\r\n          color={\"error\"}\r\n          icon={<DeleteIcon/>} title={\"Delete\"}\r\n          onMouseEnter={() => {\r\n            setContinueSelect(true);\r\n          }}\r\n          onMouseLeave={() => {\r\n            setContinueSelect(false);\r\n          }}\r\n          onClick={() => {\r\n            deleteFile(selectedFile.map((value) => value.id)).then\r\n            (() => {\r\n              setUpdate(!update);\r\n            }).catch((error) => {\r\n              showAlert(error.message, \"error\");\r\n            });\r\n          }}/>);\r\n\r\n\r\n    }\r\n  }\r\n\r\n  const openAction = (item: DriverFileProfile) => {\r\n    if (item.isFolder) {\r\n      setSearchParams({id: item.id});\r\n    } else {\r\n      window.open(getLink(item), DTARGET);\r\n    }\r\n  }\r\n\r\n  const selectAction = (e: React.MouseEvent<HTMLDivElement, MouseEvent>, fileItem: DriverFileProfile) => {\r\n    e.stopPropagation();\r\n    let newSelectedFileItems: DriverFileProfile[];\r\n    if (!selectingMode) {\r\n\r\n      if (e.ctrlKey) {\r\n        if (selectedFile.includes(fileItem)) {\r\n          newSelectedFileItems = selectedFile.filter((value) => value !== fileItem);\r\n        } else {\r\n          newSelectedFileItems = [...selectedFile, fileItem];\r\n        }\r\n      } else if (e.shiftKey) {\r\n        if (selectedFile.length === 0) {\r\n          newSelectedFileItems = [fileItem];\r\n        } else {\r\n          const newFileToSelect = [];\r\n          let founded = false;\r\n          for (let i = 0; i < currentFile.length; i++) {\r\n            const fileKey = currentFile[i];\r\n            if (fileKey === selectedFile[selectedFile.length - 1] || fileKey === fileItem) {\r\n              founded = !founded;\r\n              if (!founded) {\r\n                if (!selectedFile.includes(fileKey)) {\r\n                  newFileToSelect.push(fileKey);\r\n                }\r\n                break;\r\n              }\r\n            }\r\n            if (founded) {\r\n              if (!selectedFile.includes(fileKey)) {\r\n                newFileToSelect.push(fileKey);\r\n              }\r\n            }\r\n          }\r\n          newSelectedFileItems = [...selectedFile, ...newFileToSelect];\r\n        }\r\n      } else {\r\n        if (selectedFile.includes(fileItem)) {\r\n          const selected = selectedFile.filter((value) => value !== fileItem);\r\n          newSelectedFileItems = selected;\r\n        } else {\r\n          newSelectedFileItems = [fileItem];\r\n        }\r\n      }\r\n\r\n\r\n    } else {\r\n      // 加选\r\n      if (e.shiftKey) {\r\n        if (selectedFile.length === 0) {\r\n          newSelectedFileItems = [fileItem];\r\n        } else {\r\n          const newFileToSelect = [];\r\n          let founded = false;\r\n          for (let i = 0; i < currentFile.length; i++) {\r\n            const fileKey = currentFile[i];\r\n            if (fileKey === selectedFile[selectedFile.length - 1] || fileKey === fileItem) {\r\n              founded = !founded;\r\n              if (!founded) {\r\n                if (!selectedFile.includes(fileKey)) {\r\n                  newFileToSelect.push(fileKey);\r\n                }\r\n                break;\r\n              }\r\n            }\r\n            if (founded) {\r\n              if (!selectedFile.includes(fileKey)) {\r\n                newFileToSelect.push(fileKey);\r\n              }\r\n            }\r\n          }\r\n          newSelectedFileItems = [...selectedFile, ...newFileToSelect];\r\n        }\r\n      } else {\r\n        if (selectedFile.includes(fileItem)) {\r\n          newSelectedFileItems = selectedFile.filter((value) => value !== fileItem);\r\n        } else {\r\n          newSelectedFileItems = [...selectedFile, fileItem];\r\n        }\r\n      }\r\n    }\r\n    selectoRef.current?.setSelectedTargets(newSelectedFileItems.map((value) => document.getElementById(value.id) as HTMLElement));\r\n    setSelectedFile(newSelectedFileItems);\r\n  }\r\n\r\n  const menuItems = (item: DriverFileProfile) => {\r\n    const allItems: React.ReactElement[] = [];\r\n    if (item.isFolder) {\r\n      allItems.push(<OpenFolderButton folderId={item.id} target={DTARGET} sx={menuItemStyle}/>);\r\n    }\r\n    // else {\r\n    //   // copy link\r\n    //   allItems.push(<CopySiteLinkButton itemId={item.id} />);\r\n    //\r\n    //\r\n    //   // allItems.push(<a href={getLink(item)}\r\n    //   //                  target={isMobile ? \"_self\" : \"_blank\"}\r\n    //   //                  rel={\"noreferrer\"}\r\n    //   //                  style={{textDecoration: \"none\", color: \"inherit\", margin: \"0px\",padding: \"0px\"}}>\r\n    //   //   <FileSourceButton url={getLink(item)}  target={isMobile ? \"_self\" : \"_blank\"}/>\r\n    //   // </a>);\r\n    // }\r\n    allItems.push(<CopySiteLinkButton itemId={item.id} sx={menuItemStyle}/>);\r\n    if (canEdit) {\r\n      allItems.push(<ShareButton fileId={item.id} isPublic={item.isPublic}\r\n                                 sx={menuItemStyle}\r\n                                 onVisibilityChange={() => {\r\n                                   showAlert(\"Success\", \"success\");\r\n                                   setUpdate(!update)\r\n                                 }}/>);\r\n      allItems.push(<FileRenameButton fileId={item.id} existingName={item.name}\r\n                                      sx={menuItemStyle}\r\n                                      onRename={() => {\r\n                                        showAlert(\"Success\", \"success\");\r\n                                        setUpdate(!update)\r\n                                      }}/>);\r\n\r\n      allItems.push(<ContentButton\r\n          sx={menuItemStyle}\r\n          icon={<DriveFileMoveIcon/>} title={\"Move\"}\r\n          onClick={() => {\r\n            openDialogWithPromise<MoveDriverFileDialogIType, void>(DialogNames.MoveDriverFileDialog, {\r\n              fileId: [item.id],\r\n              currentPath: item.path\r\n            }).then((result) => {\r\n              if (result) {\r\n                setUpdate(!update);\r\n              }\r\n            })\r\n          }}/>);\r\n\r\n      allItems.push(<DeleteButton fileId={item.id}\r\n                                  sx={menuItemStyle}\r\n                                  onDelete={() => {\r\n                                    showAlert(\"Success\", \"success\");\r\n                                    setUpdate(!update)\r\n                                  }}/>);\r\n\r\n\r\n    }\r\n    return allItems;\r\n  }\r\n\r\n  const moveFileToFolder = (item: DriverFileProfile) => {\r\n    if (item.isFolder) {\r\n      const fileIdToMove = selectedFile.filter((value) => {\r\n        return value !== item;\r\n      }).map((value) => value.id);\r\n      moveFile(fileIdToMove, item.path + item.name + \"/\", item.isPublic).then(() => {\r\n        if (item.isPublic) {\r\n          showAlert(\"Items are moved to a public folder\", \"success\");\r\n        } else {\r\n          showAlert(\"Items are moved to a private folder\", \"success\");\r\n        }\r\n        setUpdate(!update);\r\n      }).catch((error) => {\r\n        showAlert(error.message, \"error\");\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  return <Stack direction={\"column\"} minHeight={\"78dvh\"}\r\n                onClick={() => {\r\n                  if (selectingMode || hasSelected) {\r\n                    setSelectedFile([]);\r\n                    selectoRef.current?.setSelectedTargets([]);\r\n                  }\r\n                }}\r\n                {...rest}>\r\n    <Breadcrumbs sx={{paddingX: 1}}>\r\n      <Link onClick={\r\n        () => {\r\n          setSearchParams({});\r\n        }\r\n      }\r\n            onDragOver={(e) => {\r\n              e.preventDefault();\r\n            }}\r\n            onDrop={(e) => {\r\n              const fileIdToMove = selectedFile.map((value) => value.id);\r\n              moveFile(fileIdToMove, \"/\").then(() => {\r\n                showAlert(\"Items are moved to the root folder\", \"success\");\r\n                setUpdate(!update);\r\n              }).catch((error) => {\r\n                showAlert(error.message, \"error\");\r\n              });\r\n            }}\r\n\r\n      >Home:</Link>\r\n      {\r\n          path.length > 0 && path.map((item, index) => {\r\n            return <Link\r\n                key={index}\r\n                onClick={\r\n                  () => {\r\n                    const newPath = \"/\" + path.slice(0, index).join(\"/\") + item;\r\n                    getFileId(newPath, owner?.id || \"\").then((response) => {\r\n                      setSearchParams({id: response});\r\n                    }).catch((error) => {\r\n                      showAlert(error.message, \"error\");\r\n                    });\r\n                  }\r\n                }\r\n                onDragOver={(e) => {\r\n                  e.preventDefault();\r\n                }}\r\n                onDrop={(e) => {\r\n                  const fileIdToMove = selectedFile.map((value) => value.id);\r\n                  const newPath = \"/\" + path.slice(0, index).join(\"/\") + item + \"/\";\r\n                  moveFile(fileIdToMove, newPath).then(() => {\r\n                    showAlert(\"Items are moved to \" + newPath, \"success\");\r\n                    setUpdate(!update);\r\n                  }).catch((error) => {\r\n                    showAlert(error.message, \"error\");\r\n                  });\r\n                }}\r\n            >{item}</Link>\r\n          })\r\n      }\r\n      {currentRoot.name && currentRoot.name !== \"\" && <Link>{currentRoot.name}</Link>}\r\n    </Breadcrumbs>\r\n    <Stack direction={\"row\"} justifyContent={\"start\"} marginY={2} spacing={1} alignItems={\"center\"}>\r\n      <BreakpointContainer up={\"md\"}>\r\n        <ListComponent data={fileActions} renderItem={(item, index) => {\r\n          return <ContentButton key={index}\r\n                                variant={\"outlined\"}\r\n                                color={\"primary\"}\r\n                                disableElevation={true}  {...item.props} />\r\n        }}/>\r\n      </BreakpointContainer>\r\n      <BreakpointContainer down={\"md\"}>\r\n        <Condition show={fileActions.length > 0}>\r\n          <MenuButton icon=<MenuIcon/> menuAlign={\"left\"} menuItems={fileActions}\r\n                      stopPropagation={true}/>\r\n        </Condition>\r\n      </BreakpointContainer>\r\n      <LayoutSwitchButton currentLayout={currentLayout}\r\n                          size={isMobile ? \"small\" : \"large\"}\r\n                          variant={\"outlined\"} color={\"primary\"}\r\n                          onLayoutChange={setCurrentLayout}\r\n                          stopPropagation={true}\r\n      />\r\n      <SorterButton currentSorter={currentSorter}\r\n                    stopPropagation={true}\r\n                    size={isMobile ? \"small\" : \"large\"}\r\n                    variant={\"outlined\"} color={\"primary\"}\r\n                    icon={<SortIcon/>}\r\n                    onSorterChange={(newSorter) => {\r\n                      setCurrentSorter(newSorter);\r\n                      setSortDirection(!sortDirection);\r\n                    }}/>\r\n      {isMobile && <FormControlLabel\r\n          value=\"selecting\"\r\n          sx={{\r\n            paddingX: -3,\r\n            marginX: -3\r\n          }}\r\n          control={<Switch color=\"primary\" checked={selectingMode}\r\n                           onClick={(e) => {\r\n                             e.stopPropagation();\r\n                           }}\r\n                           sx={{\r\n                             marginX: \"-10px\"\r\n                           }}\r\n                           onChange={(e) => {\r\n                             setSelectingMode(!selectingMode)\r\n                           }}/>}\r\n          label={<Typography\r\n              style={{marginBottom: \"-10px\", fontSize: \"small\"}}>{\"Select\"}</Typography>}\r\n          labelPlacement=\"top\"\r\n      />}\r\n\r\n\r\n      {isMobile && selectingMode && <FormControlLabel\r\n          sx={{\r\n            paddingX: -3,\r\n            marginX: -3\r\n          }}\r\n          value=\"selectAll\"\r\n          control={<Checkbox color=\"primary\" checked={selectedFile.length === currentFile.length}\r\n                             onClick={(e) => {\r\n                               e.stopPropagation();\r\n                             }}\r\n                             sx={{\r\n                               marginX: \"-10px\"\r\n                             }}\r\n                             onChange={(e) => {\r\n                               if (selectedFile.length === currentFile.length) {\r\n                                 setSelectedFile([]);\r\n                                 selectoRef.current?.setSelectedTargets([]);\r\n                                 return;\r\n                               } else {\r\n                                 setSelectedFile([...currentFile]);\r\n                                 selectoRef.current?.setSelectedTargets(currentFile.map((value) => document.getElementById(value.id) as HTMLElement));\r\n                               }\r\n                             }}/>}\r\n          label={<Typography\r\n              style={{marginBottom: \"-10px\", fontSize: \"small\"}}>{\"All\"}</Typography>}\r\n          labelPlacement=\"top\"\r\n      />}\r\n\r\n    </Stack>\r\n\r\n    <Selecto\r\n        ref={selectoRef}\r\n\r\n        // The container to add a selection element\r\n        container={document.body}\r\n        // The area to drag selection element (default: container)\r\n        dragContainer={window}\r\n        // Targets to select. You can register a queryselector or an Element.\r\n        selectableTargets={[\".target\"]}\r\n        // Whether to select by click (default: true)\r\n        selectByClick={false}\r\n        // Whether to select from the target inside (default: true)\r\n        selectFromInside={true}\r\n        preventClickEventOnDrag={true}\r\n        // After the select, whether to select the next target with the selected target (deselected if the target is selected again).\r\n        continueSelect={continueSelect}\r\n        // Determines which key to continue selecting the next target via keydown and keyup.\r\n        toggleContinueSelect={[[\"shift\"], [\"ctrl\"]]}\r\n        // The container for keydown and keyup events\r\n        keyContainer={window.document.querySelector(\".select-zone\") as HTMLElement}\r\n\r\n        dragCondition={e => {\r\n          return !hasSelected;\r\n        }}\r\n\r\n        // The rate at which the target overlaps the drag area to be selected. (default: 100)\r\n        hitRate={1}\r\n\r\n        onSelect={e => {\r\n          if (selectingMode) {\r\n            return;\r\n          }\r\n\r\n          const newSelectedFileItems: DriverFileProfile[] = [];\r\n          for (const target of e.selected) {\r\n            const id = target.id;\r\n            const fileItem = currentFile.find((value) => value.id === id);\r\n            if (fileItem) {\r\n              newSelectedFileItems.push(fileItem);\r\n            }\r\n          }\r\n          setSelectedFile(newSelectedFileItems);\r\n        }}\r\n    />\r\n    <OneOf index={currentLayout === \"stack\" ? 0 : 1}>\r\n      <Stack direction={\"column\"}>\r\n        <ListComponent data={currentFile} renderItem={(item, index) => {\r\n          return <Stack direction={\"column\"} key={item.id}>\r\n            <FileItemRow fileItem={item}\r\n                         id={item.id}\r\n                         selected={selectedFile.includes(item)}\r\n                         className={\"target\"}\r\n                         openAction={openAction}\r\n                         onClick={(e) => {\r\n                           selectAction(e, item);\r\n                         }}\r\n                         onDoubleClick={() => {\r\n                           openAction(item);\r\n                         }\r\n                         }\r\n                         menuItems={menuItems(item)}\r\n                         draggable={hasSelected}\r\n                         onDragStart={(e: React.DragEvent) => {\r\n                         }}\r\n                         onDragOver={item.isFolder ? (e: React.DragEvent) => {\r\n                           e.preventDefault();\r\n                         } : void 0}\r\n                         onDrop={(e: React.DragEvent) => {\r\n                           e.stopPropagation()\r\n                           moveFileToFolder(item);\r\n                         }}\r\n            />\r\n            <Divider/></Stack>\r\n        }}/>\r\n      </Stack>\r\n      <Grid container alignItems={\"center\"}\r\n            width={\"fit-content\"}\r\n            justifyContent={\"start\"}>\r\n        <ListComponent data={currentFile} renderItem={(item, index) => {\r\n          return <FileItemBlock key={item.id} fileItem={item}\r\n                                id={item.id}\r\n                                className={\"target\"}\r\n                                selected={selectedFile.includes(item)}\r\n                                onClick={(e) => {\r\n                                  e.stopPropagation();\r\n                                  selectAction(e, item);\r\n                                }}\r\n                                onDoubleClick={() => {\r\n                                  openAction(item);\r\n                                }}\r\n                                openAction={openAction}\r\n                                menuItems={menuItems(item)}\r\n                                draggable={hasSelected}\r\n                                onDragStart={(e: React.DragEvent) => {\r\n                                }}\r\n                                onDragOver={item.isFolder ? (e: React.DragEvent) => {\r\n                                  e.preventDefault();\r\n                                } : void 0}\r\n                                onDrop={(e: React.DragEvent) => {\r\n                                  print(\"onDrop\", e);\r\n                                  e.stopPropagation()\r\n                                  moveFileToFolder(item);\r\n                                }}\r\n          />\r\n        }}/>\r\n      </Grid>\r\n    </OneOf>\r\n    <Stack direction={\"column\"} justifyContent={\"center\"} alignItems={\"flex-start\"} marginTop={2}>\r\n      <OneOf index={selectedFile.length > 0 ? 0 : 1}>\r\n        <Typography variant={\"body1\"} color={\"textSecondary\"} textAlign={\"center\"}\r\n                    enableTranslate={false}>{\r\n            selectedFile.length + \" \" + t(\"selected\") + \", \" + getReadableFileSize(getTotalSize(selectedFile))\r\n        }</Typography>\r\n        <Typography variant={\"body1\"} color={\"textSecondary\"} textAlign={\"center\"}\r\n                    enableTranslate={false}>{\r\n            currentFile.length + \" \" + t(\"items\") + \", \" + getReadableFileSize(getTotalSize(currentFile))\r\n        }</Typography>\r\n      </OneOf>\r\n    </Stack>\r\n\r\n  </Stack>;\r\n};\r\n\r\nexport default React.memo(DriverWidget);"],"names":["ContextMenuWithLongPres","_ref","menuItems","children","rest","contextMenu","setContextMenu","React","handleContextMenu","useCallback","event","preventDefault","stopPropagation","mouseX","clientX","mouseY","clientY","handleContextMenuLongPress","window","screen","width","longPressEvent","useLongPress","threshold","handleClose","length","_jsx","Stack","_jsxs","onContextMenu","Menu","open","onClose","anchorReference","anchorPosition","top","left","undefined","ListComponent","data","renderItem","item","index","type","href","props","style","target","download","rel","onClick","e","MenuItem","sx","padding","margin","ContextMenuWithoutLongPress","_ref2","_ref3","enableLongPress","isMobile","FileIcon","contentType","isFolder","isPublic","FolderIcon","LanguageIcon","includes","split","subType","InsertPhotoIcon","CssIcon","JavascriptIcon","HtmlIcon","DescriptionIcon","VideoFileIcon","AudioFileIcon","FontDownloadIcon","InsertDriveFileIcon","FileItemLink","_fileItem$fileMetaDat","fileItem","openAction","Link","DTARGET","url","fileMetaData","component","name","FileItemRow","_fileItem$fileMetaDat2","_fileItem$fileMetaDat3","_fileItem$fileMetaDat4","selected","ContextMenu","direction","spacing","alignItems","textAlign","backgroundColor","paddingY","paddingX","BreakpointContainer","up","className","flexGrow","color","Typography","variant","enableTranslate","flexBasis","getFileType","toDisplayTime","lastModifiedDate","getReadableFileSize","sizeInBytes","toVisibility","down","fontSize","MenuButton","icon","MoreVertIcon","borderRadius","menuAlign","FileItemBlock","iconSize","flexShrink","title","Box","Badge","height","minWidth","badgeContent","overlap","anchorOrigin","vertical","horizontal","DoneIcon","LockIcon","OpenFolderButton","folderId","ContentButton","OpenInNewIcon","get_driver_url","ShareButton","fileId","onVisibilityChange","showAlert","AlertContext","ShareIcon","setVisibility","then","catch","message","DeleteButton","onDelete","DeleteIcon","deleteFile","FileRenameButton","existingName","onRename","DriveFileRenameOutlineIcon","async","openDialogWithPromise","DialogNames","RenameDriverFileDialog","filename","success","MultiStatusButton","currentStatus","statusToContentButtonProps","onStatusChange","Object","keys","map","status","rest2","menuItemStyle","stack","ViewListIcon","grid","GridViewIcon","LayoutSwitchButton","currentLayout","onLayoutChange","statusToSorterButtonProps","FormatColorTextIcon","CategoryIcon","time","AccessTimeIcon","size","ViewInArIcon","visibility","VisibilityIcon","SorterButton","currentSorter","onSorterChange","fileComparator","a","b","sorter","reverse","_a$fileMetaData","_b$fileMetaData","_a$fileMetaData2","_b$fileMetaData2","result","localeCompare","id","itemId","ContentCopyIcon","copy","location","host","DriverWidget","searchParams","setSearchParams","useSearchParams","update","setUpdate","currentFileId","get","currentRoot","setCurrentRoot","DriverFileProfile","create","setIsFolder","currentFile","setCurrentFile","selectedFile","setSelectedFile","sortDirection","setSortDirection","setCurrentSorter","rawPath","setRawPath","path","setPath","owner","setOwner","canEdit","useIsUserOrAdmin","t","useTranslation","setCurrentLayout","continueSelect","setContinueSelect","selectingMode","setSelectingMode","selectoRef","useRef","hasSelected","useEffect","getFile","response","_selectoRef$current","current","setSelectedTargets","sort","error","absPath","endsWith","slice","finalPath","lastIndexOf","existing","fileActions","push","disabled","onMouseEnter","onMouseLeave","CreateNewFolderIcon","print","NewFolderDialog","filePath","public","newFolderFile","AddLinkIcon","NewLinkFileDialog","newLinkFile","FileUploadIcon","DriverUploadDialog","DriveFileMoveIcon","MoveDriverFileDialog","value","currentPath","getLink","selectAction","_selectoRef$current2","newSelectedFileItems","shiftKey","newFileToSelect","founded","i","fileKey","filter","ctrlKey","document","getElementById","allItems","CopySiteLinkButton","moveFileToFolder","fileIdToMove","moveFile","minHeight","_selectoRef$current3","Breadcrumbs","onDragOver","onDrop","newPath","join","getFileId","justifyContent","marginY","disableElevation","Condition","show","MenuIcon","SortIcon","newSorter","FormControlLabel","marginX","control","Switch","checked","onChange","label","marginBottom","labelPlacement","Checkbox","_selectoRef$current4","_selectoRef$current5","Selecto","ref","container","body","dragContainer","selectableTargets","selectByClick","selectFromInside","preventClickEventOnDrag","toggleContinueSelect","keyContainer","querySelector","dragCondition","hitRate","onSelect","find","OneOf","onDoubleClick","draggable","onDragStart","Divider","Grid","marginTop","getTotalSize"],"sourceRoot":""}