{"version":3,"file":"static/js/123.9598aca7.chunk.js","mappings":"yOASA,MAiDMA,EAAWC,IAAiB,IAAhB,IAAEC,EAAI,IAAID,EAC1B,MAAME,GAAQC,EAAAA,EAAAA,GAAUC,EAAAA,EAAWH,GACnC,OAAOI,EAAAA,EAAAA,KAAA,aAAWC,OAAQJ,EAAOK,QAAS,KAAMC,MAAO,CAAC,IAAM,IAAM,KAAOC,SAAU,CAAC,GAAI,EAAG,IAAK,EAG9FC,EAAQA,KACZ,MAAMC,GAAmBC,EAAAA,EAAAA,WACnB,WAACC,EAAU,eAAEC,EAAc,cAAEC,IAAkBC,EAAAA,EAAAA,IAAY,CAC/DH,WAAY,CAACI,MAAO,QAASC,MAAO,eACpCJ,eAAgB,CAACG,MAAO,EAAGC,MAAO,kBAAmBC,IAAI,EAAGC,IAAI,IAChEL,cAAe,CAACE,MAAO,CAAC,EAAG,EAAG,GAAIC,MAAO,oBAGrCG,GAAkBT,EAAAA,EAAAA,WAClB,kBAACU,EAAiB,sBAAEC,IAA0BP,EAAAA,EAAAA,IAAY,CAC9DM,kBAAmB,CAACL,MAAO,QAASC,MAAO,uBAC3CK,sBAAuB,CAACN,MAAO,GAAKC,MAAO,0BAA2BC,IAAI,EAAGC,IAAI,MAKnF,OAAOI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EAELrB,EAAAA,EAAAA,KAAA,oBAAkBI,SAAUM,EAAeY,IAAOhB,EAAkBiB,MAAOf,EAAYgB,UAAWf,KAClGT,EAAAA,EAAAA,KAAA,gBAAcwB,UAAWN,EAAuBK,MAAON,EAAmBK,IAAKN,KAC/EhB,EAAAA,EAAAA,KAACN,EAAQ,CAACE,IAAK,sDAOfI,EAAAA,EAAAA,KAACyB,EAAAA,EAAa,MAAK,EAkBvB,EAfmBC,IAQV1B,EAAAA,EAAAA,KAAC2B,EAAAA,GAAM,CAACC,UAAW,SACXC,MAAO,CAACC,gBAAiB,QAASC,OAAQ,SAAUC,MAAO,UAAUX,UAClFrB,EAAAA,EAAAA,KAACK,EAAK,K","sources":["domain/website/page/3D/DemoModel.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {useRef} from 'react';\r\nimport {Canvas, useFrame, useLoader} from \"@react-three/fiber\";\r\nimport {OrbitControls} from \"@react-three/drei\";\r\nimport {useControls} from \"leva\";\r\nimport {MMDLoader} from \"three/examples/jsm/loaders/MMDLoader\";\r\n\r\ntype Props = {};\r\n\r\nconst Cube = ({position, size, color}: any) => {\r\n  const ref = useRef<any>();\r\n  // delta is the time between frames, in seconds\r\n  const random_seed = Math.random();\r\n  useFrame((state, delta) => {\r\n    if (ref.current) {\r\n      ref.current.rotation.x += random_seed * delta * 2;\r\n      ref.current.rotation.y += random_seed * delta * 1.5;\r\n      ref.current.rotation.z += delta * 2;\r\n      ref.current.position.x = Math.sin(2 * random_seed * state.clock.getElapsedTime() + random_seed) * 2;\r\n      ref.current.position.z = Math.sin(state.clock.getElapsedTime() + random_seed) * 2;\r\n    }\r\n  });\r\n\r\n  return <mesh ref={ref} position={position}>\r\n    <boxGeometry args={size}/>\r\n    {/*<MeshWobbleMaterial color={color} speed={1} factor={0.6}/>*/}\r\n    <meshStandardMaterial color={color}/>\r\n  </mesh>;\r\n}\r\n\r\nconst Sphere = ({position, size, color}: any) => {\r\n  const [isHovered, setIsHovered] = React.useState(false);\r\n  const ref = useRef<any>();\r\n  // delta is the time between frames, in seconds\r\n  const random_seed = Math.random();\r\n  useFrame((state, delta) => {\r\n    if (isHovered) {\r\n      return;\r\n    }\r\n    if (ref.current) {\r\n\r\n      ref.current.position.x = Math.sin(state.clock.getElapsedTime() + random_seed * 10) * 2 * random_seed;\r\n      ref.current.position.z = Math.sin(state.clock.getElapsedTime()) * 4 * random_seed;\r\n    }\r\n  });\r\n\r\n  return <mesh ref={ref} position={position} onPointerEnter={(event) => {\r\n    setIsHovered(true);\r\n    event.stopPropagation();\r\n  }} onPointerLeave={(event) => {\r\n    setIsHovered(false);\r\n    event.stopPropagation();\r\n  }}>\r\n    <sphereGeometry args={size}/>\r\n    <meshStandardMaterial color={color} wireframe={true}/>\r\n  </mesh>;\r\n}\r\n\r\nconst MmdModel = ({ url=\"\" }) => {\r\n  const nodes = useLoader(MMDLoader, url)\r\n  return <primitive object={nodes} dispose={null} scale={[0.25 ,0.25, 0.25]} position={[0, -3, 0]}/>\r\n}\r\n\r\nconst Scene = () => {\r\n  const directionalLight = useRef<any>();\r\n  const {lightColor, lightIntensity, lightPosition} =  useControls({\r\n    lightColor: {value: \"white\", label: \"Light Color\"},\r\n    lightIntensity: {value: 1, label: \"Light Intensity\", min:0, max:10},\r\n    lightPosition: {value: [0, 0, 2], label: \"Light Position\"}\r\n  })\r\n\r\n  const ambientLightRef = useRef<any>();\r\n  const {ambientLightColor, ambientLightIntensity} =  useControls({\r\n    ambientLightColor: {value: \"white\", label: \"Ambient Light Color\"},\r\n    ambientLightIntensity: {value: 0.4, label: \"Ambient Light Intensity\", min:0, max:10}\r\n  });\r\n\r\n  // useHelper(directionalLight, DirectionalLightHelper, 1, \"red\");\r\n\r\n  return <>\r\n    {/*<pointLight  ref = {directionalLight} color={lightColor} intensity={lightIntensity} position={lightPosition} />*/}\r\n    <directionalLight position={lightPosition} ref = {directionalLight} color={lightColor} intensity={lightIntensity}/>\r\n    <ambientLight intensity={ambientLightIntensity} color={ambientLightColor} ref={ambientLightRef}/>\r\n    <MmdModel url={\"./mmd/原神-刻晴/刻晴.pmx\"}/>\r\n    {/*<group position={[0, -1, 0]}>*/}\r\n    {/*  <Cube position={[1, 1, 1]} size={[1, 1, 1]} color={\"blue\"}/>*/}\r\n    {/*  <Sphere position={[-1, -1, -1]} size={[1, 30, 30]} color={\"orange\"}/>*/}\r\n    {/*  <Cube position={[-1, 1, 1]} size={[1, 1, 1]} color={\"green\"}/>*/}\r\n    {/*  <Sphere position={[1, -1, -1]} size={[1, 30, 30]} color={\"yellow\"}/>*/}\r\n    {/*</group>*/}\r\n    <OrbitControls/></>;\r\n}\r\n\r\nconst DemoModel = (props: Props) => {\r\n\r\n  // const ref = useRef<any>();\r\n  // useFrame((state, delta) => {\r\n  //   ref.current.rotation.x += delta;\r\n  //\r\n  // })\r\n\r\n  return <Canvas className={\"threeD\"}\r\n                 style={{backgroundColor: \"black\", height: \"100svh\", width: \"100wvh\"}}>\r\n    <Scene/>\r\n  </Canvas>;\r\n  ;\r\n};\r\n\r\nexport default DemoModel;"],"names":["MmdModel","_ref3","url","nodes","useLoader","MMDLoader","_jsx","object","dispose","scale","position","Scene","directionalLight","useRef","lightColor","lightIntensity","lightPosition","useControls","value","label","min","max","ambientLightRef","ambientLightColor","ambientLightIntensity","_jsxs","_Fragment","children","ref","color","intensity","OrbitControls","props","Canvas","className","style","backgroundColor","height","width"],"sourceRoot":""}