{"version":3,"file":"static/js/123.fccc1307.chunk.js","mappings":"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","sources":["domain/website/page/3D/DemoModel.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {useEffect, useRef, useState} from 'react';\r\nimport {Canvas, useFrame, useLoader} from \"@react-three/fiber\";\r\nimport {OrbitControls} from \"@react-three/drei\";\r\nimport {useControls} from \"leva\";\r\nimport {MMDLoader} from \"three/examples/jsm/loaders/MMDLoader\";\r\nimport {print} from \"../../../../api/util/Logging\";\r\nimport Fab from '@mui/material/Fab';\r\nimport {MMDAnimationHelper} from \"three/examples/jsm/animation/MMDAnimationHelper\";\r\nimport PauseIcon from '@mui/icons-material/Pause';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\nimport * as THREE from 'three';\r\nimport {AnimationClip, AudioLoader, Group, Vector3} from 'three';\r\nimport {Typography} from \"../../../../component/wrapper/MuiWrappers\";\r\n// import expa\r\n// import {FilePicker} from \"@mui/material\";\r\n\r\nuseLoader.preload(MMDLoader, \"/mmd/原神-刻晴/刻晴fix.pmx\");\r\ntype Props = {};\r\nconst Cube = ({position, size, color}: any) => {\r\n  const ref = useRef<any>();\r\n  // delta is the time between frames, in seconds\r\n  const random_seed = Math.random();\r\n  useFrame((state, delta) => {\r\n    if (ref.current) {\r\n      ref.current.rotation.x += random_seed * delta * 2;\r\n      ref.current.rotation.y += random_seed * delta * 1.5;\r\n      ref.current.rotation.z += delta * 2;\r\n      ref.current.position.x = Math.sin(2 * random_seed * state.clock.getElapsedTime() + random_seed) * 2;\r\n      ref.current.position.z = Math.sin(state.clock.getElapsedTime() + random_seed) * 2;\r\n    }\r\n  });\r\n\r\n  return <mesh ref={ref} position={position}>\r\n    <boxGeometry args={size}/>\r\n    {/*<MeshWobbleMaterial color={color} speed={1} factor={0.6}/>*/}\r\n    <meshStandardMaterial color={color}/>\r\n  </mesh>;\r\n}\r\n\r\nconst Sphere = ({position, size, color}: any) => {\r\n  const [isHovered, setIsHovered] = React.useState(false);\r\n  const ref = useRef<any>();\r\n  // delta is the time between frames, in seconds\r\n  const random_seed = Math.random();\r\n  useFrame((state, delta) => {\r\n    if (isHovered) {\r\n      return;\r\n    }\r\n    if (ref.current) {\r\n\r\n      ref.current.position.x = Math.sin(state.clock.getElapsedTime() + random_seed * 10) * 2 * random_seed;\r\n      ref.current.position.z = Math.sin(state.clock.getElapsedTime()) * 4 * random_seed;\r\n    }\r\n  });\r\n\r\n  return <mesh ref={ref} position={position} onPointerEnter={(event) => {\r\n    setIsHovered(true);\r\n    event.stopPropagation();\r\n  }} onPointerLeave={(event) => {\r\n    setIsHovered(false);\r\n    event.stopPropagation();\r\n  }}>\r\n    <sphereGeometry args={size}/>\r\n    <meshStandardMaterial color={color} wireframe={true}/>\r\n  </mesh>;\r\n}\r\n\r\n\r\nconst MMDModelAnimation = ({modelUrl = \"\", vmdUrl = \"\", start = false}) => {\r\n  const modelRef = useRef(); // Reference for the model\r\n  const helperRef = useRef<MMDAnimationHelper | null>(null); // Properly typed reference for the animation helper\r\n  // const phyicsRef = useRef<MMDPhysics | null>(null);\r\n  // const [physicsApi] = useBox(() => ({ mass: 1, position: [0, 0, 0] }));\r\n\r\n  // Load the PMX model using MMDLoader\r\n  const model = useLoader(MMDLoader, modelUrl);\r\n\r\n  useEffect(() => {\r\n    if (!model || !vmdUrl) return;\r\n\r\n    // Create a new MMDAnimationHelper instance\r\n    const helper = new MMDAnimationHelper();\r\n    helperRef.current = helper; // Assign helper to the ref\r\n\r\n    // Load the VMD file and apply it to the model\r\n    const loader = new MMDLoader();\r\n    loader.loadAnimation(vmdUrl, model, (vmd) => {\r\n      helper.add(model, {animation: vmd as AnimationClip, physics: false});\r\n    },void 0, (error) => {\r\n      print(\"Error loading VMD file\", error);\r\n\r\n    });\r\n\r\n    // model.traverse((child) => {\r\n    //   if (child instanceof Mesh) {\r\n    //     // Apply physics to each mesh part using physicsApi\r\n    //     useBox({ mass: 1, position: [0, 0, 0] }); // Basic example\r\n    //   }\r\n    // });\r\n\r\n    // Clean up the helper when the component unmounts\r\n    return () => {\r\n      // helper.dispose();\r\n      helperRef.current = null; // Clean up the reference\r\n      // phyicsRef.current = null;\r\n    };\r\n  }, [model, vmdUrl]);\r\n\r\n  // Use the helper to update animations on each frame\r\n  useFrame((_, delta) => {\r\n    if (helperRef.current && start) {\r\n      // print(\"Updating animation\");\r\n      helperRef.current.update(delta);\r\n    }\r\n    // if (phyicsRef.current) {\r\n    //   print(\"Updating physics\");\r\n    //   phyicsRef.current.update(delta);\r\n    // }\r\n  });\r\n\r\n  return <primitive ref={modelRef} object={model} dispose={null} scale={[0.25, 0.25, 0.25]}\r\n                    position={[0, -3, 0]}/>;\r\n};\r\nconst MmdModel = ({url = \"\"}) => {\r\n  const nodes = useLoader(MMDLoader, url)\r\n  return <primitive object={nodes} dispose={null} scale={[0.25, 0.25, 0.25]} position={[0, -3, 0]}/>\r\n}\r\n\r\n\r\ntype CameraFollowerProps = {\r\n  condition?: boolean;\r\n} & JSX.IntrinsicElements['group'];\r\n\r\nconst CameraFollower = ({\r\n                          children,\r\n                          condition = true,\r\n                          ...props\r\n                        }: CameraFollowerProps): JSX.Element => {\r\n  const ref = useRef<Group>(null);\r\n  const [cameraPos, selfPos] = [new Vector3(), new Vector3()];\r\n\r\n  useFrame(state => {\r\n    if (!ref.current || !condition) return;\r\n\r\n    state.camera.getWorldPosition(cameraPos);\r\n    ref.current.getWorldPosition(selfPos);\r\n\r\n    ref.current.lookAt(cameraPos.x, selfPos.y, cameraPos.z);\r\n  });\r\n\r\n  return (\r\n      <group ref={ref} {...props}>\r\n        {children}\r\n      </group>\r\n  );\r\n}\r\n\r\nconst Scene = ({start}: { start: boolean }) => {\r\n  const directionalLight = useRef<any>();\r\n  const point1 = useRef<any>();\r\n  const point2 = useRef<any>();\r\n  const {lightColor, lightIntensity, lightPosition} = useControls({\r\n    lightColor: {value: \"white\", label: \"Light Color\"},\r\n    lightIntensity: {value: 1, label: \"Light Intensity\", min: 0, max: 10},\r\n    lightPosition: {value: [0, 0, 2], label: \"Light Position\"}\r\n  })\r\n\r\n  const ambientLightRef = useRef<any>();\r\n  const {ambientLightColor, ambientLightIntensity} = useControls({\r\n    ambientLightColor: {value: \"white\", label: \"Ambient Light Color\"},\r\n    ambientLightIntensity: {value: 0.4, label: \"Ambient Light Intensity\", min: 0, max: 10}\r\n  });\r\n\r\n  // useHelper(directionalLight, DirectionalLightHelper, 1, \"red\");\r\n  // useHelper(point1, PointLightHelper, 1, \"red\");\r\n  // useHelper(point2, PointLightHelper, 1, \"red\");\r\n  return <>\r\n\r\n    <pointLight ref={point1} color={\"purple\"} intensity={60} position={[-3, 2, -3]}/>\r\n    <pointLight ref={point2} color={\"blue\"} intensity={30} position={[3, 2, -1]}/>\r\n    <directionalLight position={lightPosition} ref={directionalLight} color={lightColor}\r\n                      intensity={lightIntensity}/>\r\n    <ambientLight intensity={ambientLightIntensity} color={ambientLightColor}\r\n                  ref={ambientLightRef}/>\r\n    {/*<MmdModel url={\"/mmd/原神-刻晴/刻晴.pmx\"}/>*/}\r\n    {/*<Physics gravity={[0, 0, 0]} colliders={\"ball\"}>*/}\r\n    {/*<CameraFollower condition={true}>*/}\r\n    <MMDModelAnimation modelUrl={\"/mmd/原神-刻晴/刻晴fix.pmx\"}\r\n                       vmdUrl={\"/mmd/motion/testB.vmd\"} start={start}/>\r\n    {/*</CameraFollower>*/}\r\n    {/*<MmdModelWithAnimation url={\"/mmd/tda/Tda式初音ミクV4X_Ver1.00.pmx\"}/>*/}\r\n    {/*</Physics>*/}\r\n\r\n\r\n    {/*<group position={[0, -1, 0]}>*/}\r\n    {/*  <Cube position={[1, 1, 1]} size={[1, 1, 1]} color={\"blue\"}/>*/}\r\n    {/*  <Sphere position={[-1, -1, -1]} size={[1, 30, 30]} color={\"orange\"}/>*/}\r\n    {/*  <Cube position={[-1, 1, 1]} size={[1, 1, 1]} color={\"green\"}/>*/}\r\n    {/*  <Sphere position={[1, -1, -1]} size={[1, 30, 30]} color={\"yellow\"}/>*/}\r\n    {/*</group>*/}\r\n    <OrbitControls/>\r\n  </>;\r\n}\r\n\r\n\r\nconst DemoModel = (props: Props) => {\r\n\r\n  const [audio, setAudio] = useState<any>(null);\r\n  const audioRef = useRef(null);\r\n\r\n  // Load the audio using useLoader\r\n  const audioData = useLoader(AudioLoader, '/mmd/music/寄明月.mp3');\r\n  const [start, setStart] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (audioData) {\r\n      const sound = new THREE.Audio(new THREE.AudioListener());\r\n      sound.setBuffer(audioData);\r\n      sound.setLoop(true);\r\n      sound.setVolume(0.5);\r\n      setAudio(sound as any);\r\n    }\r\n  }, [audioData]);\r\n\r\n  useEffect(() => {\r\n    if (audio) {\r\n      audioRef.current = audio;\r\n      // audio.play();\r\n    }\r\n  }, [audio]);\r\n\r\n  const handlePlay = () => {\r\n    if (!audio) {\r\n      return;\r\n    }\r\n    if (start) {\r\n      setStart(false);\r\n      audio.pause();\r\n    } else {\r\n      setStart(true);\r\n      audio.play();\r\n    }\r\n  };\r\n\r\n  return <>\r\n    <Canvas className={\"threeD\"}\r\n            style={{backgroundColor: \"black\", height: \"100svh\", width: \"100wvh\"}}>\r\n      <Scene start={start}/>\r\n\r\n    </Canvas>\r\n\r\n    <Fab color=\"primary\" aria-label=\"add\" onClick={handlePlay} style={{\r\n      margin: 0,\r\n      left: 20,\r\n      top: 20,\r\n      right: 'auto',\r\n      bottom: 'auto',\r\n      position: 'fixed'\r\n    }}>\r\n      {start ? <PauseIcon/> : <PlayArrowIcon/>}\r\n    </Fab>\r\n    <Typography>Model BY: miHoYo/观海子, Motion By: Nivsha</Typography>\r\n\r\n    {/*<button onClick={handlePlay} style={{position: \"absolute\"}}>{start ? \"Stop\" : \"Start\"}</button>*/}\r\n\r\n\r\n  </>;\r\n  ;\r\n};\r\n\r\nexport default DemoModel;"],"names":["useLoader","preload","MMDLoader","MMDModelAnimation","_ref3","modelUrl","vmdUrl","start","modelRef","useRef","helperRef","model","useEffect","helper","MMDAnimationHelper","current","loadAnimation","vmd","add","animation","physics","error","print","useFrame","_","delta","update","_jsx","ref","object","dispose","scale","position","Scene","_ref6","directionalLight","point1","point2","lightColor","lightIntensity","lightPosition","useControls","value","label","min","max","ambientLightRef","ambientLightColor","ambientLightIntensity","_jsxs","_Fragment","children","color","intensity","OrbitControls","props","audio","setAudio","useState","audioRef","audioData","AudioLoader","setStart","sound","THREE","setBuffer","setLoop","setVolume","Canvas","className","style","backgroundColor","height","width","Fab","onClick","handlePlay","pause","play","margin","left","top","right","bottom","PauseIcon","PlayArrowIcon","Typography"],"sourceRoot":""}